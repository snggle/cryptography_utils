import 'package:cryptography_utils/cryptography_utils.dart';
import 'package:flutter_test/flutter_test.dart';

void main() {
  ECCurve actualECCurve = ECCurve(
    a: BigInt.zero,
    b: BigInt.from(7),
    h: BigInt.one,
    p: BigInt.parse('115792089237316195423570985008687907853269984665640564039457584007908834671663'),
  );

  group('Tests of ECPointUtils.addPoints()', () {
    test('Should [return Point A] if Point B has [y == 0]', () {
      // Arrange
      ECPoint actualECPointA = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('81319019332320932433362828097302459572337478806236825399943010153005451037063'),
        y: BigInt.parse('63794373195066146887165912086276777534613881904622197777320299150546876896696'),
        z: BigInt.parse('25467929105773129418133646961698452503881743623998816965087828687771580185942'),
      );

      ECPoint actualECPointB = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('109809582697629541179477143463768131161650648020283737506803606109779771350309'),
        y: BigInt.zero,
        z: BigInt.parse('15114296647857780461657875995579731758281183768828053400819025202844531705682'),
      );

      // Act
      ECPoint actualAddedECPoint = ECPointUtils.addPoints(actualECPointA, actualECPointB);

      // Assert
      ECPoint expectedAddedECPoint = actualECPointA;

      expect(actualAddedECPoint, expectedAddedECPoint);
    });

    test('Should [return Point A] if Point B has [z == 0]', () {
      // Arrange
      ECPoint actualECPointA = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('81319019332320932433362828097302459572337478806236825399943010153005451037063'),
        y: BigInt.parse('63794373195066146887165912086276777534613881904622197777320299150546876896696'),
        z: BigInt.parse('25467929105773129418133646961698452503881743623998816965087828687771580185942'),
      );

      ECPoint actualECPointB = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('109809582697629541179477143463768131161650648020283737506803606109779771350309'),
        y: BigInt.parse('93904199375389538639503047221917403320671286887529822165996195593332713512966'),
        z: BigInt.zero,
      );

      // Act
      ECPoint actualAddedECPoint = ECPointUtils.addPoints(actualECPointA, actualECPointB);

      // Assert
      ECPoint expectedAddedECPoint = actualECPointA;

      expect(actualAddedECPoint, expectedAddedECPoint);
    });

    test('Should [return Point B] if Point A has [y == 0]', () {
      // Arrange
      ECPoint actualECPointA = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('109809582697629541179477143463768131161650648020283737506803606109779771350309'),
        y: BigInt.zero,
        z: BigInt.parse('15114296647857780461657875995579731758281183768828053400819025202844531705682'),
      );

      ECPoint actualECPointB = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('81319019332320932433362828097302459572337478806236825399943010153005451037063'),
        y: BigInt.parse('63794373195066146887165912086276777534613881904622197777320299150546876896696'),
        z: BigInt.parse('25467929105773129418133646961698452503881743623998816965087828687771580185942'),
      );

      // Act
      ECPoint actualAddedECPoint = ECPointUtils.addPoints(actualECPointA, actualECPointB);

      // Assert
      ECPoint expectedAddedECPoint = actualECPointB;

      expect(actualAddedECPoint, expectedAddedECPoint);
    });

    test('Should [return Point B] if Point A has [z == 0]', () {
      // Arrange
      ECPoint actualECPointA = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('109809582697629541179477143463768131161650648020283737506803606109779771350309'),
        y: BigInt.parse('93904199375389538639503047221917403320671286887529822165996195593332713512966'),
        z: BigInt.zero,
      );

      ECPoint actualECPointB = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('81319019332320932433362828097302459572337478806236825399943010153005451037063'),
        y: BigInt.parse('63794373195066146887165912086276777534613881904622197777320299150546876896696'),
        z: BigInt.parse('25467929105773129418133646961698452503881743623998816965087828687771580185942'),
      );

      // Act
      ECPoint actualAddedECPoint = ECPointUtils.addPoints(actualECPointA, actualECPointB);

      // Assert
      ECPoint expectedAddedECPoint = actualECPointB;

      expect(actualAddedECPoint, expectedAddedECPoint);
    });

    test('Should [return summed points] if Point A has [z == 1]', () {
      // Arrange
      ECPoint actualECPointA = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('49844093485842753019501723164709087800134847594852664670182601545797061237061'),
        y: BigInt.parse('102584019795063234624860865414832132871049165551248963828805190591824528686504'),
        z: BigInt.one,
      );

      ECPoint actualECPointB = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('81319019332320932433362828097302459572337478806236825399943010153005451037063'),
        y: BigInt.parse('63794373195066146887165912086276777534613881904622197777320299150546876896696'),
        z: BigInt.parse('25467929105773129418133646961698452503881743623998816965087828687771580185942'),
      );

      // Act
      ECPoint actualAddedECPoint = ECPointUtils.addPoints(actualECPointA, actualECPointB);

      // Assert
      ECPoint expectedAddedECPoint = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('47108866518901398025890429958440594620201894767009700965394928209135821302262'),
        y: BigInt.parse('107205152387242345071064443275835542460394346866004434462087337716190643900825'),
        z: BigInt.parse('35159270905786155469120381972962073592930361506003070271840090468816307616781'),
      );

      expect(actualAddedECPoint, expectedAddedECPoint);
    });

    test('Should [return summed points] if Point A has [NEGATIVE y]', () {
      // Arrange
      ECPoint actualECPointA = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('60583730834363332587821256722811697779794349002873451254651018994487618619023'),
        y: BigInt.parse('-34632058271664950557167054206873197187312339430837636749102524507801461931756'),
        z: BigInt.parse('60579242201561901844275884073514206985327841693703586330174962022817101819884'),
      );

      ECPoint actualECPointB = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('80321635083418528360130532325884434558078898320247912277156073809145057290852'),
        y: BigInt.parse('64024471021241573854559554554861030148256602078809860147531248951871109496982'),
        z: BigInt.parse('18495291807984492607746137678733874474552005178165738101833917276347752540821'),
      );

      // Act
      ECPoint actualAddedECPoint = ECPointUtils.addPoints(actualECPointA, actualECPointB);

      // Assert
      ECPoint expectedAddedECPoint = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('95307114760379003033638878907655340841369712028728546011982011977374711095822'),
        y: BigInt.parse('805431166026363295396572047955032882791757643668269118169630217514909586729'),
        z: BigInt.parse('52653634113945518492173756078421308099596025530546658068408971584651355760241'),
      );

      expect(actualAddedECPoint, expectedAddedECPoint);
    });

    test('Should [return summed points] if Point B has [z == 1]', () {
      // Arrange
      ECPoint actualECPointA = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('49844093485842753019501723164709087800134847594852664670182601545797061237061'),
        y: BigInt.parse('102584019795063234624860865414832132871049165551248963828805190591824528686504'),
        z: BigInt.parse('25467929105773129418133646961698452503881743623998816965087828687771580185942'),
      );

      ECPoint actualECPointB = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('81319019332320932433362828097302459572337478806236825399943010153005451037063'),
        y: BigInt.parse('63794373195066146887165912086276777534613881904622197777320299150546876896696'),
        z: BigInt.one,
      );

      // Act
      ECPoint actualAddedECPoint = ECPointUtils.addPoints(actualECPointA, actualECPointB);

      // Assert
      ECPoint expectedAddedECPoint = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('80321635083418528360130532325884434558078898320247912277156073809145057290852'),
        y: BigInt.parse('64024471021241573854559554554861030148256602078809860147531248951871109496982'),
        z: BigInt.parse('18495291807984492607746137678733874474552005178165738101833917276347752540821'),
      );

      expect(actualAddedECPoint, expectedAddedECPoint);
    });

    test('Should [return summed points] if Point B has [NEGATIVE y]', () {
      // Arrange
      ECPoint actualECPointA = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('60583730834363332587821256722811697779794349002873451254651018994487618619023'),
        y: BigInt.parse('34632058271664950557167054206873197187312339430837636749102524507801461931756'),
        z: BigInt.parse('60579242201561901844275884073514206985327841693703586330174962022817101819884'),
      );

      ECPoint actualECPointB = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('80321635083418528360130532325884434558078898320247912277156073809145057290852'),
        y: BigInt.parse('-64024471021241573854559554554861030148256602078809860147531248951871109496982'),
        z: BigInt.parse('18495291807984492607746137678733874474552005178165738101833917276347752540821'),
      );

      // Act
      ECPoint actualAddedECPoint = ECPointUtils.addPoints(actualECPointA, actualECPointB);

      // Assert
      ECPoint expectedAddedECPoint = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('95307114760379003033638878907655340841369712028728546011982011977374711095822'),
        y: BigInt.parse('114986658071289832128174412960732874970478227021972294921287953790393925084934'),
        z: BigInt.parse('52653634113945518492173756078421308099596025530546658068408971584651355760241'),
      );

      expect(actualAddedECPoint, expectedAddedECPoint);
    });

    test('Should [return summed points] if points have [z == 1]', () {
      // Arrange
      ECPoint actualECPointA = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('49844093485842753019501723164709087800134847594852664670182601545797061237061'),
        y: BigInt.parse('102584019795063234624860865414832132871049165551248963828805190591824528686504'),
        z: BigInt.one,
      );

      ECPoint actualECPointB = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('81319019332320932433362828097302459572337478806236825399943010153005451037063'),
        y: BigInt.parse('63794373195066146887165912086276777534613881904622197777320299150546876896696'),
        z: BigInt.one,
      );

      // Act
      ECPoint actualAddedECPoint = ECPointUtils.addPoints(actualECPointA, actualECPointB);

      // Assert
      ECPoint expectedAddedECPoint = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('10750744862820939504143056873870975412637426680212676939688907962132805132766'),
        y: BigInt.parse('45472287698687213610194463637609761791958746115419965913905028046594026110722'),
        z: BigInt.parse('62949851692956358827722209865186743544405262422768321459520817214416779600004'),
      );

      expect(actualAddedECPoint, expectedAddedECPoint);
    });

    test('Should [return summed points] if points have [EQUAL z]', () {
      // Arrange
      ECPoint actualECPointA = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('49844093485842753019501723164709087800134847594852664670182601545797061237061'),
        y: BigInt.parse('102584019795063234624860865414832132871049165551248963828805190591824528686504'),
        z: BigInt.parse('25467929105773129418133646961698452503881743623998816965087828687771580185942'),
      );

      ECPoint actualECPointB = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('81319019332320932433362828097302459572337478806236825399943010153005451037063'),
        y: BigInt.parse('63794373195066146887165912086276777534613881904622197777320299150546876896696'),
        z: BigInt.parse('25467929105773129418133646961698452503881743623998816965087828687771580185942'),
      );

      // Act
      ECPoint actualAddedECPoint = ECPointUtils.addPoints(actualECPointA, actualECPointB);

      // Assert
      ECPoint expectedAddedECPoint = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('60583730834363332587821256722811697779794349002873451254651018994487618619023'),
        y: BigInt.parse('34632058271664950557167054206873197187312339430837636749102524507801461931756'),
        z: BigInt.parse('60579242201561901844275884073514206985327841693703586330174962022817101819884'),
      );

      expect(actualAddedECPoint, expectedAddedECPoint);
    });

    test('Should [return summed points] if [all coordinates DIFFERENT]', () {
      // Arrange
      ECPoint actualECPointA = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('60583730834363332587821256722811697779794349002873451254651018994487618619023'),
        y: BigInt.parse('34632058271664950557167054206873197187312339430837636749102524507801461931756'),
        z: BigInt.parse('60579242201561901844275884073514206985327841693703586330174962022817101819884'),
      );

      ECPoint actualECPointB = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('80321635083418528360130532325884434558078898320247912277156073809145057290852'),
        y: BigInt.parse('64024471021241573854559554554861030148256602078809860147531248951871109496982'),
        z: BigInt.parse('18495291807984492607746137678733874474552005178165738101833917276347752540821'),
      );

      // Act
      ECPoint actualAddedECPoint = ECPointUtils.addPoints(actualECPointA, actualECPointB);

      // Assert
      ECPoint expectedAddedECPoint = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('85230509375666374694206534711411841128338760079963608915951769492150859344052'),
        y: BigInt.parse('11747400515121876872756293900323702590216704728487393956366643138611508383510'),
        z: BigInt.parse('52653634113945518492173756078421308099596025530546658068408971584651355760241'),
      );

      expect(actualAddedECPoint, expectedAddedECPoint);
    });
  });

  group('Tests of ECPointUtils.doublePoint()', () {
    test('Should return [infinity point] if [y == 0]', () {
      // Arrange
      ECPoint actualECPoint = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('85230509375666374694206534711411841128338760079963608915951769492150859344052'),
        y: BigInt.zero,
        z: BigInt.parse('52653634113945518492173756078421308099596025530546658068408971584651355760241'),
      );

      // Act
      ECPoint actualDoubledECPoint = ECPointUtils.doublePoint(actualECPoint);

      // Assert
      ECPoint expectedDoubledECPoint = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.zero,
        y: BigInt.zero,
        z: BigInt.one,
      );

      expect(actualDoubledECPoint, expectedDoubledECPoint);
    });

    test('Should return [infinity point] if [z == 0]', () {
      // Arrange
      ECPoint actualECPoint = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('85230509375666374694206534711411841128338760079963608915951769492150859344052'),
        y: BigInt.parse('11747400515121876872756293900323702590216704728487393956366643138611508383510'),
        z: BigInt.zero,
      );

      // Act
      ECPoint actualDoubledECPoint = ECPointUtils.doublePoint(actualECPoint);

      // Assert
      ECPoint expectedDoubledECPoint = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.zero,
        y: BigInt.zero,
        z: BigInt.one,
      );

      expect(actualDoubledECPoint, expectedDoubledECPoint);
    });

    test('Should return [doubled point] if [y NEGATIVE]', () {
      // Arrange
      ECPoint actualECPoint = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('112493521227235842342161702367152776762258418796128923941807267992806097637252'),
        y: BigInt.parse('-37692935343326360757797302548784111649171669025364614127628458974040544590130'),
        z: BigInt.parse('69264116543329901114334108413746394374624678861675273498205049015602923863512'),
      );

      // Act
      ECPoint actualDoubledECPoint = ECPointUtils.doublePoint(actualECPoint);

      // Assert
      ECPoint expectedDoubledECPoint = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('69728461109448392201130741785244252394754871703346922942789718728386966284529'),
        y: BigInt.parse('110850251299670071742912535313603049278861541436688692840777426906913867649174'),
        z: BigInt.parse('72150960430356903207195783270811779004890860097679903715006704772899893244985'),
      );

      expect(actualDoubledECPoint, expectedDoubledECPoint);
    });

    test('Should return [doubled point] if [y POSITIVE]', () {
      // Arrange
      ECPoint actualECPoint = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('112493521227235842342161702367152776762258418796128923941807267992806097637252'),
        y: BigInt.parse('37692935343326360757797302548784111649171669025364614127628458974040544590130'),
        z: BigInt.parse('69264116543329901114334108413746394374624678861675273498205049015602923863512'),
      );

      // Act
      ECPoint actualDoubledECPoint = ECPointUtils.doublePoint(actualECPoint);

      // Assert
      ECPoint expectedDoubledECPoint = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('69728461109448392201130741785244252394754871703346922942789718728386966284529'),
        y: BigInt.parse('110850251299670071742912535313603049278861541436688692840777426906913867649174'),
        z: BigInt.parse('43641128806959292216375201737876128848379124567960660324450879235008941426678'),
      );

      expect(actualDoubledECPoint, expectedDoubledECPoint);
    });

    test('Should return [doubled point] if [z == 1]', () {
      // Arrange
      ECPoint actualECPoint = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('60583730834363332587821256722811697779794349002873451254651018994487618619023'),
        y: BigInt.parse('34632058271664950557167054206873197187312339430837636749102524507801461931756'),
        z: BigInt.one,
      );

      // Act
      ECPoint actualDoubledECPoint = ECPointUtils.doublePoint(actualECPoint);

      // Assert
      ECPoint expectedDoubledECPoint = ECPoint(
        curve: actualECCurve,
        n: BigInt.parse('115792089237316195423570985008687907852837564279074904382605163141518161494337'),
        x: BigInt.parse('112493521227235842342161702367152776762258418796128923941807267992806097637252'),
        y: BigInt.parse('37692935343326360757797302548784111649171669025364614127628458974040544590130'),
        z: BigInt.parse('69264116543329901114334108413746394374624678861675273498205049015602923863512'),
      );

      expect(actualDoubledECPoint, expectedDoubledECPoint);
    });
  });
}
