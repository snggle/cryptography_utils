import 'dart:typed_data';

import 'package:cryptography_utils/cryptography_utils.dart';
import 'package:test/test.dart';

void main() {
  group('Tests of SolanaInstructionDecoded.decode()', () {
    test('Should [return SolanaInstructionDecoded] - testing _decodeComputeBudgetProgram() -> _decodeComputeUnitPrice', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[29, 3, 212, 1, 8, 94, 206, 81, 207, 141, 242, 121, 172, 168, 237, 109, 45, 74, 148, 132, 23, 185, 13, 77, 21, 64, 84, 94, 20, 24, 88, 244]), Uint8List.fromList(<int>[81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92]), Uint8List.fromList(<int>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), Uint8List.fromList(<int>[3, 6, 70, 111, 229, 33, 23, 50, 255, 236, 173, 186, 114, 195, 155, 231, 188, 140, 229, 187, 197, 247, 18, 107, 44, 67, 155, 58, 64, 0, 0, 0])];
      SolanaInstruction actualSolanaInstruction =
          SolanaInstruction(programIdIndex: 3, accountIndices: <int>[], data: Uint8List.fromList(<int>[3, 0, 45, 49, 1, 0, 0, 0, 0]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[3, 0, 45, 49, 1, 0, 0, 0, 0]));
      expect(actualSolanaInstruction.accountIndices, <int>[]);
      expect(actualSolanaInstruction.programIdIndex, 3);
      expect(actualSolanaInstructionDecoded.programId, 'ComputeBudget111111111111111111111111111111');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.computeBudgetUnitPrice);
      expect(actualSolanaInstructionDecoded.unitPrice, 20000000);
    });

    test('Should [return SolanaInstructionDecoded] - testing _decodeComputeBudgetProgram() -> _decodeComputeUnitLimit', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[29, 3, 212, 1, 8, 94, 206, 81, 207, 141, 242, 121, 172, 168, 237, 109, 45, 74, 148, 132, 23, 185, 13, 77, 21, 64, 84, 94, 20, 24, 88, 244]), Uint8List.fromList(<int>[81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92]), Uint8List.fromList(<int>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), Uint8List.fromList(<int>[3, 6, 70, 111, 229, 33, 23, 50, 255, 236, 173, 186, 114, 195, 155, 231, 188, 140, 229, 187, 197, 247, 18, 107, 44, 67, 155, 58, 64, 0, 0, 0])];
      SolanaInstruction actualSolanaInstruction =
          SolanaInstruction(programIdIndex: 3, accountIndices: <int>[], data: Uint8List.fromList(<int>[2, 239, 1, 0, 0]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[2, 239, 1, 0, 0]));
      expect(actualSolanaInstruction.accountIndices, <int>[]);
      expect(actualSolanaInstruction.programIdIndex, 3);
      expect(actualSolanaInstructionDecoded.programId, 'ComputeBudget111111111111111111111111111111');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.computeBudgetUnitLimit);
      expect(actualSolanaInstructionDecoded.unitLimit, 495);
    });

    test('Should [return unknown SolanaInstructionDecoded] - testing _decodeComputeBudgetProgram() with unknown instruction tag', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[29, 3, 212, 1, 8, 94, 206, 81, 207, 141, 242, 121, 172, 168, 237, 109, 45, 74, 148, 132, 23, 185, 13, 77, 21, 64, 84, 94, 20, 24, 88, 244]), Uint8List.fromList(<int>[81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92]), Uint8List.fromList(<int>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), Uint8List.fromList(<int>[3, 6, 70, 111, 229, 33, 23, 50, 255, 236, 173, 186, 114, 195, 155, 231, 188, 140, 229, 187, 197, 247, 18, 107, 44, 67, 155, 58, 64, 0, 0, 0])];
      SolanaInstruction actualSolanaInstruction =
      SolanaInstruction(programIdIndex: 3, accountIndices: <int>[], data: Uint8List.fromList(<int>[1, 0, 45, 49, 1, 0, 0, 0, 0]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[1, 0, 45, 49, 1, 0, 0, 0, 0]));
      expect(actualSolanaInstruction.accountIndices, <int>[]);
      expect(actualSolanaInstruction.programIdIndex, 3);
      expect(actualSolanaInstructionDecoded.programId, 'ComputeBudget111111111111111111111111111111');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.unknown);
    });

    test('Should [return SolanaInstructionDecoded] - testing _decodeSystemProgram() -> _decodeSystemTransfer()', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[29, 3, 212, 1, 8, 94, 206, 81, 207, 141, 242, 121, 172, 168, 237, 109, 45, 74, 148, 132, 23, 185, 13, 77, 21, 64, 84, 94, 20, 24, 88, 244]), Uint8List.fromList(<int>[81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92]), Uint8List.fromList(<int>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), Uint8List.fromList(<int>[3, 6, 70, 111, 229, 33, 23, 50, 255, 236, 173, 186, 114, 195, 155, 231, 188, 140, 229, 187, 197, 247, 18, 107, 44, 67, 155, 58, 64, 0, 0, 0])];
      SolanaInstruction actualSolanaInstruction =
          SolanaInstruction(programIdIndex: 2, accountIndices: <int>[0, 1], data: Uint8List.fromList(<int>[2, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[2, 0, 0, 0, 0, 202, 154, 59, 0, 0, 0, 0]));
      expect(actualSolanaInstruction.accountIndices, <int>[0, 1]);
      expect(actualSolanaInstruction.programIdIndex, 2);
      expect(actualSolanaInstructionDecoded.programId, '11111111111111111111111111111111');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.systemTransfer);
      expect(actualSolanaInstructionDecoded.from, '2xGD7cWtwpmCpW2NvT9EJt96eDavS3suVgQNVaBU4A19');
      expect(actualSolanaInstructionDecoded.to, '6VWUtQiEbSXy6viXkxs7xywevQJXruVD1NmhX4akdC1Z');
      expect(actualSolanaInstructionDecoded.amount, 1000000000);
    });

    test('Should [return SolanaInstructionDecoded] - testing _decodeSystemProgram() -> _decodeSystemAssign()', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[0x51, 0x98, 0x8, 0x5, 0x5d, 0xe3, 0x75, 0xe1, 0x95, 0x18, 0x92, 0xab, 0xb0, 0xb8, 0x34, 0x1f, 0x73, 0x63, 0x2f, 0xf2, 0x3f, 0x96, 0x68, 0x77, 0x3a, 0x30, 0xf4, 0xca, 0x34, 0xcd, 0x7b, 0x5c]), Uint8List.fromList(<int>[0xc3, 0x3f, 0x1c, 0xbb, 0x48, 0xeb, 0x4b, 0xc1, 0xad, 0xef, 0x59, 0x73, 0x96, 0x42, 0x8f, 0x53, 0x22, 0xf0, 0x77, 0x75, 0xaa, 0xfc, 0x9d, 0x89, 0x5a, 0x3a, 0x51, 0x9f, 0xdd, 0xd2, 0x2a, 0x96]), Uint8List.fromList(<int>[0x3, 0x6, 0x46, 0x6f, 0xe5, 0x21, 0x17, 0x32, 0xff, 0xec, 0xad, 0xba, 0x72, 0xc3, 0x9b, 0xe7, 0xbc, 0x8c, 0xe5, 0xbb, 0xc5, 0xf7, 0x12, 0x6b, 0x2c, 0x43, 0x9b, 0x3a, 0x40, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa1, 0xd8, 0x17, 0x91, 0x37, 0x54, 0x2a, 0x98, 0x34, 0x37, 0xbd, 0xfe, 0x2a, 0x7a, 0xb2, 0x55, 0x7f, 0x53, 0x5c, 0x8a, 0x78, 0x72, 0x2b, 0x68, 0xa4, 0x9d, 0xc0, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x19, 0x2c, 0x5c, 0x51, 0x21, 0x8c, 0xc9, 0x4c, 0x3d, 0x4a, 0xf1, 0x7f, 0x58, 0xda, 0xee, 0x8, 0x9b, 0xa1, 0xfd, 0x44, 0xe3, 0xdb, 0xd9, 0x8a, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0xdd, 0xf4, 0x2a, 0x4, 0x80, 0xa, 0x54, 0xde, 0x2e, 0x58, 0x3f, 0x94, 0xf1, 0x7b, 0x8, 0x97, 0x25, 0xb7, 0x72, 0xd1, 0x33, 0x35, 0x26, 0x27, 0x12, 0x41, 0x53, 0x27, 0x76, 0xd2, 0xff, 0xc6]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x18, 0xc7, 0x74, 0xc9, 0x28, 0x56, 0x63, 0x98, 0x69, 0x1d, 0x5e, 0xb6, 0x8b, 0x5e, 0xb8, 0xa3, 0x9b, 0x4b, 0x6d, 0x5c, 0x73, 0x55, 0x5b, 0x21, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x19, 0x35, 0x84, 0xd0, 0xfe, 0xed, 0x9b, 0xb3, 0x43, 0x1d, 0x13, 0x20, 0x6b, 0xe5, 0x44, 0x28, 0x1b, 0x57, 0xb8, 0x56, 0x6c, 0xc5, 0x37, 0x5f, 0xf4, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa1, 0xd8, 0x17, 0xa5, 0x2, 0x5, 0xb, 0x68, 0x7, 0x91, 0xe6, 0xce, 0x6d, 0xb8, 0x8e, 0x1e, 0x5b, 0x71, 0x50, 0xf6, 0x1f, 0xc6, 0x79, 0xa, 0x4e, 0xb4, 0xd1, 0x0, 0x0, 0x0, 0x0])];
      SolanaInstruction actualSolanaInstruction = SolanaInstruction(programIdIndex: 3, accountIndices: <int>[0, 1], data: Uint8List.fromList(<int>[3, 0, 0, 0, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92, 7, 0, 0, 0, 0, 0, 0, 0, 115, 116, 97, 107, 101, 58, 48, 200, 8, 153, 59, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[3, 0, 0, 0, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92, 7, 0, 0, 0, 0, 0, 0, 0, 115, 116, 97, 107, 101, 58, 48, 200, 8, 153, 59, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0]));
      expect(actualSolanaInstruction.accountIndices, <int>[0, 1]);
      expect(actualSolanaInstruction.programIdIndex, 3);
      expect(actualSolanaInstructionDecoded.programId, '11111111111111111111111111111111');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.systemAssign);
      expect(actualSolanaInstructionDecoded.signer, '6VWUtQiEbSXy6viXkxs7xywevQJXruVD1NmhX4akdC1Z');
      expect(actualSolanaInstructionDecoded.to, '6VWUtQiEbSXy6viXkxs7xywevQJXruVD1NmhX4akdC1Z');
    });

    test('Should [return unknown SolanaInstructionDecoded] - testing _decodeSystemProgram() with unknown instruction tag', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[0x51, 0x98, 0x8, 0x5, 0x5d, 0xe3, 0x75, 0xe1, 0x95, 0x18, 0x92, 0xab, 0xb0, 0xb8, 0x34, 0x1f, 0x73, 0x63, 0x2f, 0xf2, 0x3f, 0x96, 0x68, 0x77, 0x3a, 0x30, 0xf4, 0xca, 0x34, 0xcd, 0x7b, 0x5c]), Uint8List.fromList(<int>[0xc3, 0x3f, 0x1c, 0xbb, 0x48, 0xeb, 0x4b, 0xc1, 0xad, 0xef, 0x59, 0x73, 0x96, 0x42, 0x8f, 0x53, 0x22, 0xf0, 0x77, 0x75, 0xaa, 0xfc, 0x9d, 0x89, 0x5a, 0x3a, 0x51, 0x9f, 0xdd, 0xd2, 0x2a, 0x96]), Uint8List.fromList(<int>[0x3, 0x6, 0x46, 0x6f, 0xe5, 0x21, 0x17, 0x32, 0xff, 0xec, 0xad, 0xba, 0x72, 0xc3, 0x9b, 0xe7, 0xbc, 0x8c, 0xe5, 0xbb, 0xc5, 0xf7, 0x12, 0x6b, 0x2c, 0x43, 0x9b, 0x3a, 0x40, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa1, 0xd8, 0x17, 0x91, 0x37, 0x54, 0x2a, 0x98, 0x34, 0x37, 0xbd, 0xfe, 0x2a, 0x7a, 0xb2, 0x55, 0x7f, 0x53, 0x5c, 0x8a, 0x78, 0x72, 0x2b, 0x68, 0xa4, 0x9d, 0xc0, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x19, 0x2c, 0x5c, 0x51, 0x21, 0x8c, 0xc9, 0x4c, 0x3d, 0x4a, 0xf1, 0x7f, 0x58, 0xda, 0xee, 0x8, 0x9b, 0xa1, 0xfd, 0x44, 0xe3, 0xdb, 0xd9, 0x8a, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0xdd, 0xf4, 0x2a, 0x4, 0x80, 0xa, 0x54, 0xde, 0x2e, 0x58, 0x3f, 0x94, 0xf1, 0x7b, 0x8, 0x97, 0x25, 0xb7, 0x72, 0xd1, 0x33, 0x35, 0x26, 0x27, 0x12, 0x41, 0x53, 0x27, 0x76, 0xd2, 0xff, 0xc6]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x18, 0xc7, 0x74, 0xc9, 0x28, 0x56, 0x63, 0x98, 0x69, 0x1d, 0x5e, 0xb6, 0x8b, 0x5e, 0xb8, 0xa3, 0x9b, 0x4b, 0x6d, 0x5c, 0x73, 0x55, 0x5b, 0x21, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x19, 0x35, 0x84, 0xd0, 0xfe, 0xed, 0x9b, 0xb3, 0x43, 0x1d, 0x13, 0x20, 0x6b, 0xe5, 0x44, 0x28, 0x1b, 0x57, 0xb8, 0x56, 0x6c, 0xc5, 0x37, 0x5f, 0xf4, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa1, 0xd8, 0x17, 0xa5, 0x2, 0x5, 0xb, 0x68, 0x7, 0x91, 0xe6, 0xce, 0x6d, 0xb8, 0x8e, 0x1e, 0x5b, 0x71, 0x50, 0xf6, 0x1f, 0xc6, 0x79, 0xa, 0x4e, 0xb4, 0xd1, 0x0, 0x0, 0x0, 0x0])];
      SolanaInstruction actualSolanaInstruction = SolanaInstruction(programIdIndex: 3, accountIndices: <int>[0, 1], data: Uint8List.fromList(<int>[1, 0, 0, 0, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92, 7, 0, 0, 0, 0, 0, 0, 0, 115, 116, 97, 107, 101, 58, 48, 200, 8, 153, 59, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[1, 0, 0, 0, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92, 7, 0, 0, 0, 0, 0, 0, 0, 115, 116, 97, 107, 101, 58, 48, 200, 8, 153, 59, 0, 0, 0, 0, 200, 0, 0, 0, 0, 0, 0, 0, 6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0]));
      expect(actualSolanaInstruction.accountIndices, <int>[0, 1]);
      expect(actualSolanaInstruction.programIdIndex, 3);
      expect(actualSolanaInstructionDecoded.programId, '11111111111111111111111111111111');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.unknown);
    });

    test('Should [return SolanaInstructionDecoded] - testing _decodeStakeProgram() -> _decodeStakeInitialize()', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[0x51, 0x98, 0x8, 0x5, 0x5d, 0xe3, 0x75, 0xe1, 0x95, 0x18, 0x92, 0xab, 0xb0, 0xb8, 0x34, 0x1f, 0x73, 0x63, 0x2f, 0xf2, 0x3f, 0x96, 0x68, 0x77, 0x3a, 0x30, 0xf4, 0xca, 0x34, 0xcd, 0x7b, 0x5c]), Uint8List.fromList(<int>[0xc3, 0x3f, 0x1c, 0xbb, 0x48, 0xeb, 0x4b, 0xc1, 0xad, 0xef, 0x59, 0x73, 0x96, 0x42, 0x8f, 0x53, 0x22, 0xf0, 0x77, 0x75, 0xaa, 0xfc, 0x9d, 0x89, 0x5a, 0x3a, 0x51, 0x9f, 0xdd, 0xd2, 0x2a, 0x96]), Uint8List.fromList(<int>[0x3, 0x6, 0x46, 0x6f, 0xe5, 0x21, 0x17, 0x32, 0xff, 0xec, 0xad, 0xba, 0x72, 0xc3, 0x9b, 0xe7, 0xbc, 0x8c, 0xe5, 0xbb, 0xc5, 0xf7, 0x12, 0x6b, 0x2c, 0x43, 0x9b, 0x3a, 0x40, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa1, 0xd8, 0x17, 0x91, 0x37, 0x54, 0x2a, 0x98, 0x34, 0x37, 0xbd, 0xfe, 0x2a, 0x7a, 0xb2, 0x55, 0x7f, 0x53, 0x5c, 0x8a, 0x78, 0x72, 0x2b, 0x68, 0xa4, 0x9d, 0xc0, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x19, 0x2c, 0x5c, 0x51, 0x21, 0x8c, 0xc9, 0x4c, 0x3d, 0x4a, 0xf1, 0x7f, 0x58, 0xda, 0xee, 0x8, 0x9b, 0xa1, 0xfd, 0x44, 0xe3, 0xdb, 0xd9, 0x8a, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0xdd, 0xf4, 0x2a, 0x4, 0x80, 0xa, 0x54, 0xde, 0x2e, 0x58, 0x3f, 0x94, 0xf1, 0x7b, 0x8, 0x97, 0x25, 0xb7, 0x72, 0xd1, 0x33, 0x35, 0x26, 0x27, 0x12, 0x41, 0x53, 0x27, 0x76, 0xd2, 0xff, 0xc6]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x18, 0xc7, 0x74, 0xc9, 0x28, 0x56, 0x63, 0x98, 0x69, 0x1d, 0x5e, 0xb6, 0x8b, 0x5e, 0xb8, 0xa3, 0x9b, 0x4b, 0x6d, 0x5c, 0x73, 0x55, 0x5b, 0x21, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x19, 0x35, 0x84, 0xd0, 0xfe, 0xed, 0x9b, 0xb3, 0x43, 0x1d, 0x13, 0x20, 0x6b, 0xe5, 0x44, 0x28, 0x1b, 0x57, 0xb8, 0x56, 0x6c, 0xc5, 0x37, 0x5f, 0xf4, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa1, 0xd8, 0x17, 0xa5, 0x2, 0x5, 0xb, 0x68, 0x7, 0x91, 0xe6, 0xce, 0x6d, 0xb8, 0x8e, 0x1e, 0x5b, 0x71, 0x50, 0xf6, 0x1f, 0xc6, 0x79, 0xa, 0x4e, 0xb4, 0xd1, 0x0, 0x0, 0x0, 0x0])];
      SolanaInstruction actualSolanaInstruction = SolanaInstruction(programIdIndex: 4, accountIndices: <int>[1, 6, 7, 8, 9, 0], data: Uint8List.fromList(<int>[0, 0, 0, 0, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[0, 0, 0, 0, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24,146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92]));
      expect(actualSolanaInstruction.accountIndices, <int>[1, 6, 7, 8, 9, 0]);
      expect(actualSolanaInstruction.programIdIndex, 4);
      expect(actualSolanaInstructionDecoded.programId, 'Stake11111111111111111111111111111111111111');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.stakeInitialize);
      expect(actualSolanaInstructionDecoded.to, 'E9AKSDnvxFcUrvMqRVrANNZ2qdidh4AC1niGhQ6vGZxR');
    });

    test('Should [return SolanaInstructionDecoded] - testing _decodeStakeProgram() -> _decodeStakeDelegate()', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[0x51, 0x98, 0x8, 0x5, 0x5d, 0xe3, 0x75, 0xe1, 0x95, 0x18, 0x92, 0xab, 0xb0, 0xb8, 0x34, 0x1f, 0x73, 0x63, 0x2f, 0xf2, 0x3f, 0x96, 0x68, 0x77, 0x3a, 0x30, 0xf4, 0xca, 0x34, 0xcd, 0x7b, 0x5c]), Uint8List.fromList(<int>[0xc3, 0x3f, 0x1c, 0xbb, 0x48, 0xeb, 0x4b, 0xc1, 0xad, 0xef, 0x59, 0x73, 0x96, 0x42, 0x8f, 0x53, 0x22, 0xf0, 0x77, 0x75, 0xaa, 0xfc, 0x9d, 0x89, 0x5a, 0x3a, 0x51, 0x9f, 0xdd, 0xd2, 0x2a, 0x96]), Uint8List.fromList(<int>[0x3, 0x6, 0x46, 0x6f, 0xe5, 0x21, 0x17, 0x32, 0xff, 0xec, 0xad, 0xba, 0x72, 0xc3, 0x9b, 0xe7, 0xbc, 0x8c, 0xe5, 0xbb, 0xc5, 0xf7, 0x12, 0x6b, 0x2c, 0x43, 0x9b, 0x3a, 0x40, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa1, 0xd8, 0x17, 0x91, 0x37, 0x54, 0x2a, 0x98, 0x34, 0x37, 0xbd, 0xfe, 0x2a, 0x7a, 0xb2, 0x55, 0x7f, 0x53, 0x5c, 0x8a, 0x78, 0x72, 0x2b, 0x68, 0xa4, 0x9d, 0xc0, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x19, 0x2c, 0x5c, 0x51, 0x21, 0x8c, 0xc9, 0x4c, 0x3d, 0x4a, 0xf1, 0x7f, 0x58, 0xda, 0xee, 0x8, 0x9b, 0xa1, 0xfd, 0x44, 0xe3, 0xdb, 0xd9, 0x8a, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0xdd, 0xf4, 0x2a, 0x4, 0x80, 0xa, 0x54, 0xde, 0x2e, 0x58, 0x3f, 0x94, 0xf1, 0x7b, 0x8, 0x97, 0x25, 0xb7, 0x72, 0xd1, 0x33, 0x35, 0x26, 0x27, 0x12, 0x41, 0x53, 0x27, 0x76, 0xd2, 0xff, 0xc6]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x18, 0xc7, 0x74, 0xc9, 0x28, 0x56, 0x63, 0x98, 0x69, 0x1d, 0x5e, 0xb6, 0x8b, 0x5e, 0xb8, 0xa3, 0x9b, 0x4b, 0x6d, 0x5c, 0x73, 0x55, 0x5b, 0x21, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x19, 0x35, 0x84, 0xd0, 0xfe, 0xed, 0x9b, 0xb3, 0x43, 0x1d, 0x13, 0x20, 0x6b, 0xe5, 0x44, 0x28, 0x1b, 0x57, 0xb8, 0x56, 0x6c, 0xc5, 0x37, 0x5f, 0xf4, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa1, 0xd8, 0x17, 0xa5, 0x2, 0x5, 0xb, 0x68, 0x7, 0x91, 0xe6, 0xce, 0x6d, 0xb8, 0x8e, 0x1e, 0x5b, 0x71, 0x50, 0xf6, 0x1f, 0xc6, 0x79, 0xa, 0x4e, 0xb4, 0xd1, 0x0, 0x0, 0x0, 0x0])];
      SolanaInstruction actualSolanaInstruction =
          SolanaInstruction(programIdIndex: 4, accountIndices: <int>[1, 6, 7, 8, 9, 0], data: Uint8List.fromList(<int>[2, 0, 0, 0]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[2, 0, 0, 0]));
      expect(actualSolanaInstruction.accountIndices, <int>[1, 6, 7, 8, 9, 0]);
      expect(actualSolanaInstruction.programIdIndex, 4);
      expect(actualSolanaInstructionDecoded.programId, 'Stake11111111111111111111111111111111111111');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.stakeDelegate);
      expect(actualSolanaInstructionDecoded.from, '6VWUtQiEbSXy6viXkxs7xywevQJXruVD1NmhX4akdC1Z');
      expect(actualSolanaInstructionDecoded.to, 'E9AKSDnvxFcUrvMqRVrANNZ2qdidh4AC1niGhQ6vGZxR');
    });

    test('Should [return SolanaInstructionDecoded] - testing _decodeStakeProgram() -> _decodeStakeDeactivate()', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[29, 3, 212, 1, 8, 94, 206, 81, 207, 141, 242, 121, 172, 168, 237, 109, 45, 74, 148, 132, 23, 185, 13, 77, 21, 64, 84, 94, 20, 24, 88, 244]), Uint8List.fromList(<int>[174, 145, 249, 183, 28, 188, 51, 182, 241, 4, 242, 35, 144, 122, 69, 173, 250, 180, 225, 202, 242, 56, 169, 233, 31, 100, 162, 62, 204, 40, 2, 99]), Uint8List.fromList(<int>[3, 6, 70, 111, 229, 33, 23, 50, 255, 236, 173, 186, 114, 195, 155, 231, 188, 140, 229, 187, 197, 247, 18, 107, 44, 67, 155, 58, 64, 0, 0, 0]), Uint8List.fromList(<int>[6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0]), Uint8List.fromList(<int>[6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0])];
      SolanaInstruction actualSolanaInstruction =
          SolanaInstruction(programIdIndex: 3, accountIndices: <int>[1, 4, 0], data: Uint8List.fromList(<int>[5, 0, 0, 0]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[5, 0, 0, 0]));
      expect(actualSolanaInstruction.accountIndices, <int>[1, 4, 0]);
      expect(actualSolanaInstruction.programIdIndex, 3);
      expect(actualSolanaInstructionDecoded.programId, 'Stake11111111111111111111111111111111111111');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.stakeDeactivate);
      expect(actualSolanaInstructionDecoded.from, 'CkT3NP8HMam7v73564b638kPBvy8SGTt9mNjuLtRw79k');
      expect(actualSolanaInstructionDecoded.to, '2xGD7cWtwpmCpW2NvT9EJt96eDavS3suVgQNVaBU4A19');
    });

    test('Should [return SolanaInstructionDecoded] - testing _decodeStakeProgram() -> _decodeStakeWithdraw()', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[29, 3, 212, 1, 8, 94, 206, 81, 207, 141, 242, 121, 172, 168, 237, 109, 45, 74, 148, 132, 23, 185, 13, 77, 21, 64, 84, 94, 20, 24, 88, 244]), Uint8List.fromList(<int>[174, 145, 249, 183, 28, 188, 51, 182, 241, 4, 242, 35, 144, 122, 69, 173, 250, 180, 225, 202, 242, 56, 169, 233, 31, 100, 162, 62, 204, 40, 2, 99]), Uint8List.fromList(<int>[3, 6, 70, 111, 229, 33, 23, 50, 255, 236, 173, 186, 114, 195, 155, 231, 188, 140, 229, 187, 197, 247, 18, 107, 44, 67, 155, 58, 64, 0, 0, 0]), Uint8List.fromList(<int>[6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0]), Uint8List.fromList(<int>[6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0]), Uint8List.fromList(<int>[6, 167, 213, 23, 25, 53, 132, 208, 254, 237, 155, 179, 67, 29, 19, 32, 107, 229, 68, 40, 27, 87, 184, 86, 108, 197, 55, 95, 244, 0, 0, 0])];
      SolanaInstruction actualSolanaInstruction = SolanaInstruction(
          programIdIndex: 3, accountIndices: <int>[1, 0, 4, 5, 0], data: Uint8List.fromList(<int>[4, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[4, 0, 0, 0, 128, 159, 189, 59, 0, 0, 0, 0]));
      expect(actualSolanaInstruction.accountIndices, <int>[1, 0, 4, 5, 0]);
      expect(actualSolanaInstruction.programIdIndex, 3);
      expect(actualSolanaInstructionDecoded.programId, 'Stake11111111111111111111111111111111111111');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.stakeWithdraw);
      expect(actualSolanaInstructionDecoded.from, 'CkT3NP8HMam7v73564b638kPBvy8SGTt9mNjuLtRw79k');
      expect(actualSolanaInstructionDecoded.to, '2xGD7cWtwpmCpW2NvT9EJt96eDavS3suVgQNVaBU4A19');
      expect(actualSolanaInstructionDecoded.amount, 1002282880);
    });

    test('Should [return unknown SolanaInstructionDecoded] - testing _decodeStakeProgram() with unknown instruction tag', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[29, 3, 212, 1, 8, 94, 206, 81, 207, 141, 242, 121, 172, 168, 237, 109, 45, 74, 148, 132, 23, 185, 13, 77, 21, 64, 84, 94, 20, 24, 88, 244]), Uint8List.fromList(<int>[174, 145, 249, 183, 28, 188, 51, 182, 241, 4, 242, 35, 144, 122, 69, 173, 250, 180, 225, 202, 242, 56, 169, 233, 31, 100, 162, 62, 204, 40, 2, 99]), Uint8List.fromList(<int>[3, 6, 70, 111, 229, 33, 23, 50, 255, 236, 173, 186, 114, 195, 155, 231, 188, 140, 229, 187, 197, 247, 18, 107, 44, 67, 155, 58, 64, 0, 0, 0]), Uint8List.fromList(<int>[6, 161, 216, 23, 145, 55, 84, 42, 152, 52, 55, 189, 254, 42, 122, 178, 85, 127, 83, 92, 138, 120, 114, 43, 104, 164, 157, 192, 0, 0, 0, 0]), Uint8List.fromList(<int>[6, 167, 213, 23, 24, 199, 116, 201, 40, 86, 99, 152, 105, 29, 94, 182, 139, 94, 184, 163, 155, 75, 109, 92, 115, 85, 91, 33, 0, 0, 0, 0])];
      SolanaInstruction actualSolanaInstruction =
      SolanaInstruction(programIdIndex: 3, accountIndices: <int>[1, 4, 0], data: Uint8List.fromList(<int>[1, 0, 0, 0]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[1, 0, 0, 0]));
      expect(actualSolanaInstruction.accountIndices, <int>[1, 4, 0]);
      expect(actualSolanaInstruction.programIdIndex, 3);
      expect(actualSolanaInstructionDecoded.programId, 'Stake11111111111111111111111111111111111111');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.unknown);
    });

    test('Should [return SolanaInstructionDecoded] - testing _decodeTokenProgram() -> _decodeTokenApproveChecked()', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[29, 3, 212, 1, 8, 94, 206, 81, 207, 141, 242, 121, 172, 168, 237, 109, 45, 74, 148, 132, 23, 185, 13, 77, 21, 64, 84, 94, 20, 24, 88, 244]), Uint8List.fromList(<int>[65, 195, 248, 71, 38, 108, 7, 153, 170, 40, 181, 87, 109, 92, 9, 56, 245, 16, 207, 80, 68, 1, 178, 128, 190, 188, 246, 130, 177, 139, 141, 40]), Uint8List.fromList(<int>[126, 4, 208, 146, 155, 82, 193, 192, 157, 232, 127, 145, 20, 161, 214, 68, 18, 11, 192, 97, 229, 81, 8, 151, 117, 251, 132, 121, 160, 253, 246, 67]), Uint8List.fromList(<int>[59, 68, 44, 179, 145, 33, 87, 241, 58, 147, 61, 1, 52, 40, 45, 3, 43, 95, 254, 205, 1, 162, 219, 241, 183, 121, 6, 8, 223, 0, 46, 167]), Uint8List.fromList(<int>[3, 6, 70, 111, 229, 33, 23, 50, 255, 236, 173, 186, 114, 195, 155, 231, 188, 140, 229, 187, 197, 247, 18, 107, 44, 67, 155, 58, 64, 0, 0, 0]), Uint8List.fromList(<int>[6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235, 121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133, 126, 255, 0, 169])];
      SolanaInstruction actualSolanaInstruction =
          SolanaInstruction(programIdIndex: 5, accountIndices: <int>[2, 3, 1, 0], data: Uint8List.fromList(<int>[12, 64, 66, 15, 0, 0, 0, 0, 0, 6]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[12, 64, 66, 15, 0, 0, 0, 0, 0, 6]));
      expect(actualSolanaInstruction.accountIndices, <int>[2, 3, 1, 0]);
      expect(actualSolanaInstruction.programIdIndex, 5);
      expect(actualSolanaInstructionDecoded.programId, 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.tokenTransfer);
      expect(actualSolanaInstructionDecoded.from, '9UvdRv2CoyLrgdGbobrQu6feMoapdzY1oqueuYMBfLWv');
      expect(actualSolanaInstructionDecoded.to, '5RipPdH3QLE7cyKzf7HKDrUoBrPKNi8odK866vJZV3AP');
      expect(actualSolanaInstructionDecoded.amount, 1000000);
    });

    test('Should [return unknown SolanaInstructionDecoded] - testing _decodeTokenProgram() with unknown instruction tag', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[29, 3, 212, 1, 8, 94, 206, 81, 207, 141, 242, 121, 172, 168, 237, 109, 45, 74, 148, 132, 23, 185, 13, 77, 21, 64, 84, 94, 20, 24, 88, 244]), Uint8List.fromList(<int>[65, 195, 248, 71, 38, 108, 7, 153, 170, 40, 181, 87, 109, 92, 9, 56, 245, 16, 207, 80, 68, 1, 178, 128, 190, 188, 246, 130, 177, 139, 141, 40]), Uint8List.fromList(<int>[126, 4, 208, 146, 155, 82, 193, 192, 157, 232, 127, 145, 20, 161, 214, 68, 18, 11, 192, 97, 229, 81, 8, 151, 117, 251, 132, 121, 160, 253, 246, 67]), Uint8List.fromList(<int>[59, 68, 44, 179, 145, 33, 87, 241, 58, 147, 61, 1, 52, 40, 45, 3, 43, 95, 254, 205, 1, 162, 219, 241, 183, 121, 6, 8, 223, 0, 46, 167]), Uint8List.fromList(<int>[3, 6, 70, 111, 229, 33, 23, 50, 255, 236, 173, 186, 114, 195, 155, 231, 188, 140, 229, 187, 197, 247, 18, 107, 44, 67, 155, 58, 64, 0, 0, 0]), Uint8List.fromList(<int>[6, 221, 246, 225, 215, 101, 161, 147, 217, 203, 225, 70, 206, 235, 121, 172, 28, 180, 133, 237, 95, 91, 55, 145, 58, 140, 245, 133, 126, 255, 0, 169])];
      SolanaInstruction actualSolanaInstruction =
      SolanaInstruction(programIdIndex: 5, accountIndices: <int>[2, 3, 1, 0], data: Uint8List.fromList(<int>[11, 64, 66, 15, 0, 0, 0, 0, 0, 6]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[11, 64, 66, 15, 0, 0, 0, 0, 0, 6]));
      expect(actualSolanaInstruction.accountIndices, <int>[2, 3, 1, 0]);
      expect(actualSolanaInstruction.programIdIndex, 5);
      expect(actualSolanaInstructionDecoded.programId, 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.unknown);
    });

    test('Should [return SolanaInstructionDecoded] - testing _decodeSwapProgram()', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[0xac, 0x54, 0xc2, 0xf6, 0x6, 0xd, 0xdd, 0x1f, 0x2d, 0x15, 0x6b, 0xd7, 0x5c, 0x57, 0x56, 0x7f, 0x36, 0x11, 0x87, 0xc9, 0x56, 0x21, 0x27, 0x48, 0xc4, 0xfb, 0x43, 0x11, 0x18, 0x57, 0xa6, 0x56]), Uint8List.fromList(<int>[0x56, 0x77, 0x34, 0x58, 0x75, 0xf4, 0x88, 0x16, 0xbb, 0xea, 0x63, 0xe5, 0x47, 0x90, 0xcc, 0xca, 0xc7, 0x6c, 0xd6, 0x1f, 0x7f, 0x14, 0xd3, 0xaf, 0xfa, 0xaf, 0xdd, 0xcc, 0x48, 0xe2, 0x4a, 0xa4]), Uint8List.fromList(<int>[0x66, 0x7f, 0xcb, 0x53, 0x85, 0x52, 0x36, 0xb1, 0x19, 0x26, 0xf, 0x61, 0x26, 0x31, 0x2f, 0x7f, 0x3, 0x23, 0x98, 0xd2, 0xc2, 0xbc, 0x90, 0xe9, 0x13, 0x21, 0xb4, 0xcc, 0x7e, 0xd8, 0xd7, 0x24]), Uint8List.fromList(<int>[0x71, 0x33, 0x7d, 0x91, 0xdf, 0x2b, 0xe7, 0x5f, 0xf1, 0xc1, 0xce, 0x88, 0xc1, 0xf5, 0xf0, 0x29, 0x3c, 0xe7, 0xee, 0x45, 0x62, 0xf6, 0xee, 0x3e, 0x4, 0x5f, 0xa0, 0x7f, 0xaa, 0xd3, 0x11, 0xdd]), Uint8List.fromList(<int>[0x8a, 0x8b, 0xbc, 0xc5, 0xea, 0x68, 0x9b, 0x51, 0xef, 0x12, 0x7b, 0xcf, 0x3f, 0xf0, 0xb1, 0x23, 0x92, 0xa5, 0x4c, 0x50, 0x9b, 0x20, 0x30, 0x4d, 0x4c, 0x48, 0x86, 0xd3, 0xc1, 0x64, 0x5b, 0x83]), Uint8List.fromList(<int>[0xcc, 0xdf, 0xe0, 0x8f, 0x51, 0xfa, 0x49, 0x2b, 0x49, 0x72, 0x88, 0xf1, 0x7f, 0x25, 0x52, 0x4, 0xce, 0x2, 0xb0, 0xd1, 0xdf, 0xf6, 0xcf, 0x5, 0xbb, 0x2c, 0x22, 0x8e, 0xfd, 0xd1, 0xed, 0x2c]), Uint8List.fromList(<int>[0xdf, 0xef, 0xd1, 0xa1, 0x4a, 0xe5, 0x2a, 0x2c, 0xe6, 0x15, 0x90, 0xbd, 0x7e, 0x89, 0xd7, 0x8a, 0xe9, 0x34, 0xe2, 0x60, 0x4a, 0xb, 0xd2, 0x58, 0x76, 0xf6, 0xb3, 0x5c, 0x7d, 0x72, 0x58, 0x7e]), Uint8List.fromList(<int>[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), Uint8List.fromList(<int>[0x3, 0x6, 0x46, 0x6f, 0xe5, 0x21, 0x17, 0x32, 0xff, 0xec, 0xad, 0xba, 0x72, 0xc3, 0x9b, 0xe7, 0xbc, 0x8c, 0xe5, 0xbb, 0xc5, 0xf7, 0x12, 0x6b, 0x2c, 0x43, 0x9b, 0x3a, 0x40, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x4, 0x79, 0xd5, 0x5b, 0xf2, 0x31, 0xc0, 0x6e, 0xee, 0x74, 0xc5, 0x6e, 0xce, 0x68, 0x15, 0x7, 0xfd, 0xb1, 0xb2, 0xde, 0xa3, 0xf4, 0x8e, 0x51, 0x2, 0xb1, 0xcd, 0xa2, 0x56, 0xbc, 0x13, 0x8f]), Uint8List.fromList(<int>[0x6, 0xdd, 0xf6, 0xe1, 0xd7, 0x65, 0xa1, 0x93, 0xd9, 0xcb, 0xe1, 0x46, 0xce, 0xeb, 0x79, 0xac, 0x1c, 0xb4, 0x85, 0xed, 0x5f, 0x5b, 0x37, 0x91, 0x3a, 0x8c, 0xf5, 0x85, 0x7e, 0xff, 0x0, 0xa9]), Uint8List.fromList(<int>[0x52, 0x61, 0xd1, 0x4a, 0xac, 0xc5, 0xbc, 0xe, 0xec, 0x63, 0x5d, 0xa8, 0x70, 0x5a, 0x1f, 0x70, 0xa3, 0x9e, 0xe3, 0x5a, 0x9a, 0xcf, 0xb, 0xf8, 0xf2, 0x2c, 0xc6, 0xce, 0x49, 0x1, 0x9d, 0x7a]), Uint8List.fromList(<int>[0x8c, 0x97, 0x25, 0x8f, 0x4e, 0x24, 0x89, 0xf1, 0xbb, 0x3d, 0x10, 0x29, 0x14, 0x8e, 0xd, 0x83, 0xb, 0x5a, 0x13, 0x99, 0xda, 0xff, 0x10, 0x84, 0x4, 0x8e, 0x7b, 0xd8, 0xdb, 0xe9, 0xf8, 0x59]), Uint8List.fromList(<int>[0x9a, 0x80, 0xb, 0xff, 0x4c, 0x87, 0x36, 0x88, 0x96, 0xc2, 0xf, 0xc1, 0x40, 0x73, 0xeb, 0xf1, 0xcb, 0x5a, 0xa3, 0x75, 0xfe, 0x81, 0xfe, 0x4d, 0xbd, 0xc8, 0x2b, 0xa4, 0xdf, 0xb7, 0x5e, 0x78]), Uint8List.fromList(<int>[0xb4, 0x3f, 0xfa, 0x27, 0xf5, 0xd7, 0xf6, 0x4a, 0x74, 0xc0, 0x9b, 0x1f, 0x29, 0x58, 0x79, 0xde, 0x4b, 0x9, 0xab, 0x36, 0xdf, 0xc9, 0xdd, 0x51, 0x4b, 0x32, 0x1a, 0xa7, 0xb3, 0x8c, 0xe5]), Uint8List.fromList(<int>[0xe7, 0x4a, 0xd9, 0x6c, 0xe3, 0x65, 0x9f, 0xd3, 0x13, 0x51, 0x0, 0x28, 0x4b, 0xf7, 0x78, 0x4, 0x5b, 0x85, 0x10, 0xa8, 0xf3, 0x4e, 0x49, 0x8c, 0x92, 0x2e, 0xee, 0x6f, 0xc3, 0x5, 0xf8, 0x69])];
      SolanaInstruction actualSolanaInstruction =
          SolanaInstruction(programIdIndex: 12, accountIndices: <int>[0, 4, 0, 23, 7, 10], data: Uint8List.fromList(<int>[1]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[1]));
      expect(actualSolanaInstruction.accountIndices, <int>[0, 4, 0, 23, 7, 10]);
      expect(actualSolanaInstruction.programIdIndex, 12);
      expect(actualSolanaInstructionDecoded.programId, 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.swap);
      expect(actualSolanaInstructionDecoded.from, 'Cbi65bkTUnJWG8uesnCHg2gAEj4ujeD1SamJPe78fdq7');
      expect(actualSolanaInstructionDecoded.to, 'AKpr7UPK7JdQ1BjqkNmo1HQUMwve8EW6EZQhZRbiHPPY');
    });

    test('Should [return unknown SolanaInstructionDecoded] - testing _decodeSwapProgram()', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[0xac, 0x54, 0xc2, 0xf6, 0x6, 0xd, 0xdd, 0x1f, 0x2d, 0x15, 0x6b, 0xd7, 0x5c, 0x57, 0x56, 0x7f, 0x36, 0x11, 0x87, 0xc9, 0x56, 0x21, 0x27, 0x48, 0xc4, 0xfb, 0x43, 0x11, 0x18, 0x57, 0xa6, 0x56]), Uint8List.fromList(<int>[0x56, 0x77, 0x34, 0x58, 0x75, 0xf4, 0x88, 0x16, 0xbb, 0xea, 0x63, 0xe5, 0x47, 0x90, 0xcc, 0xca, 0xc7, 0x6c, 0xd6, 0x1f, 0x7f, 0x14, 0xd3, 0xaf, 0xfa, 0xaf, 0xdd, 0xcc, 0x48, 0xe2, 0x4a, 0xa4]), Uint8List.fromList(<int>[0x66, 0x7f, 0xcb, 0x53, 0x85, 0x52, 0x36, 0xb1, 0x19, 0x26, 0xf, 0x61, 0x26, 0x31, 0x2f, 0x7f, 0x3, 0x23, 0x98, 0xd2, 0xc2, 0xbc, 0x90, 0xe9, 0x13, 0x21, 0xb4, 0xcc, 0x7e, 0xd8, 0xd7, 0x24]), Uint8List.fromList(<int>[0x71, 0x33, 0x7d, 0x91, 0xdf, 0x2b, 0xe7, 0x5f, 0xf1, 0xc1, 0xce, 0x88, 0xc1, 0xf5, 0xf0, 0x29, 0x3c, 0xe7, 0xee, 0x45, 0x62, 0xf6, 0xee, 0x3e, 0x4, 0x5f, 0xa0, 0x7f, 0xaa, 0xd3, 0x11, 0xdd]), Uint8List.fromList(<int>[0x8a, 0x8b, 0xbc, 0xc5, 0xea, 0x68, 0x9b, 0x51, 0xef, 0x12, 0x7b, 0xcf, 0x3f, 0xf0, 0xb1, 0x23, 0x92, 0xa5, 0x4c, 0x50, 0x9b, 0x20, 0x30, 0x4d, 0x4c, 0x48, 0x86, 0xd3, 0xc1, 0x64, 0x5b, 0x83]), Uint8List.fromList(<int>[0xcc, 0xdf, 0xe0, 0x8f, 0x51, 0xfa, 0x49, 0x2b, 0x49, 0x72, 0x88, 0xf1, 0x7f, 0x25, 0x52, 0x4, 0xce, 0x2, 0xb0, 0xd1, 0xdf, 0xf6, 0xcf, 0x5, 0xbb, 0x2c, 0x22, 0x8e, 0xfd, 0xd1, 0xed, 0x2c]), Uint8List.fromList(<int>[0xdf, 0xef, 0xd1, 0xa1, 0x4a, 0xe5, 0x2a, 0x2c, 0xe6, 0x15, 0x90, 0xbd, 0x7e, 0x89, 0xd7, 0x8a, 0xe9, 0x34, 0xe2, 0x60, 0x4a, 0xb, 0xd2, 0x58, 0x76, 0xf6, 0xb3, 0x5c, 0x7d, 0x72, 0x58, 0x7e]), Uint8List.fromList(<int>[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), Uint8List.fromList(<int>[0x3, 0x6, 0x46, 0x6f, 0xe5, 0x21, 0x17, 0x32, 0xff, 0xec, 0xad, 0xba, 0x72, 0xc3, 0x9b, 0xe7, 0xbc, 0x8c, 0xe5, 0xbb, 0xc5, 0xf7, 0x12, 0x6b, 0x2c, 0x43, 0x9b, 0x3a, 0x40, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x4, 0x79, 0xd5, 0x5b, 0xf2, 0x31, 0xc0, 0x6e, 0xee, 0x74, 0xc5, 0x6e, 0xce, 0x68, 0x15, 0x7, 0xfd, 0xb1, 0xb2, 0xde, 0xa3, 0xf4, 0x8e, 0x51, 0x2, 0xb1, 0xcd, 0xa2, 0x56, 0xbc, 0x13, 0x8f]), Uint8List.fromList(<int>[0x6, 0xdd, 0xf6, 0xe1, 0xd7, 0x65, 0xa1, 0x93, 0xd9, 0xcb, 0xe1, 0x46, 0xce, 0xeb, 0x79, 0xac, 0x1c, 0xb4, 0x85, 0xed, 0x5f, 0x5b, 0x37, 0x91, 0x3a, 0x8c, 0xf5, 0x85, 0x7e, 0xff, 0x0, 0xa9]), Uint8List.fromList(<int>[0x52, 0x61, 0xd1, 0x4a, 0xac, 0xc5, 0xbc, 0xe, 0xec, 0x63, 0x5d, 0xa8, 0x70, 0x5a, 0x1f, 0x70, 0xa3, 0x9e, 0xe3, 0x5a, 0x9a, 0xcf, 0xb, 0xf8, 0xf2, 0x2c, 0xc6, 0xce, 0x49, 0x1, 0x9d, 0x7a]), Uint8List.fromList(<int>[0x8c, 0x97, 0x25, 0x8f, 0x4e, 0x24, 0x89, 0xf1, 0xbb, 0x3d, 0x10, 0x29, 0x14, 0x8e, 0xd, 0x83, 0xb, 0x5a, 0x13, 0x99, 0xda, 0xff, 0x10, 0x84, 0x4, 0x8e, 0x7b, 0xd8, 0xdb, 0xe9, 0xf8, 0x59]), Uint8List.fromList(<int>[0x9a, 0x80, 0xb, 0xff, 0x4c, 0x87, 0x36, 0x88, 0x96, 0xc2, 0xf, 0xc1, 0x40, 0x73, 0xeb, 0xf1, 0xcb, 0x5a, 0xa3, 0x75, 0xfe, 0x81, 0xfe, 0x4d, 0xbd, 0xc8, 0x2b, 0xa4, 0xdf, 0xb7, 0x5e, 0x78]), Uint8List.fromList(<int>[0xb4, 0x3f, 0xfa, 0x27, 0xf5, 0xd7, 0xf6, 0x4a, 0x74, 0xc0, 0x9b, 0x1f, 0x29, 0x58, 0x79, 0xde, 0x4b, 0x9, 0xab, 0x36, 0xdf, 0xc9, 0xdd, 0x51, 0x4b, 0x32, 0x1a, 0xa7, 0xb3, 0x8c, 0xe5]), Uint8List.fromList(<int>[0xe7, 0x4a, 0xd9, 0x6c, 0xe3, 0x65, 0x9f, 0xd3, 0x13, 0x51, 0x0, 0x28, 0x4b, 0xf7, 0x78, 0x4, 0x5b, 0x85, 0x10, 0xa8, 0xf3, 0x4e, 0x49, 0x8c, 0x92, 0x2e, 0xee, 0x6f, 0xc3, 0x5, 0xf8, 0x69])];
      SolanaInstruction actualSolanaInstruction =
      SolanaInstruction(programIdIndex: 12, accountIndices: <int>[0, 4, 0, 23, 7, 10], data: Uint8List.fromList(<int>[1]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[1]));
      expect(actualSolanaInstruction.accountIndices, <int>[0, 4, 0, 23, 7, 10]);
      expect(actualSolanaInstruction.programIdIndex, 12);
      expect(actualSolanaInstructionDecoded.programId, 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.swap);
      expect(actualSolanaInstructionDecoded.from, 'Cbi65bkTUnJWG8uesnCHg2gAEj4ujeD1SamJPe78fdq7');
      expect(actualSolanaInstructionDecoded.to, 'AKpr7UPK7JdQ1BjqkNmo1HQUMwve8EW6EZQhZRbiHPPY');
    });

    test('Should [return unknown SolanaInstructionDecoded] - testing decode() with unknown programId', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[0xac, 0x54, 0xc2, 0xf6, 0x6, 0xd, 0xdd, 0x1f, 0x2d, 0x15, 0x6b, 0xd7, 0x5c, 0x57, 0x56, 0x7f, 0x36, 0x11, 0x87, 0xc9, 0x56, 0x21, 0x27, 0x48, 0xc4, 0xfb, 0x43, 0x11, 0x18, 0x57, 0xa6, 0x56]), Uint8List.fromList(<int>[0x56, 0x77, 0x34, 0x58, 0x75, 0xf4, 0x88, 0x16, 0xbb, 0xea, 0x63, 0xe5, 0x47, 0x90, 0xcc, 0xca, 0xc7, 0x6c, 0xd6, 0x1f, 0x7f, 0x14, 0xd3, 0xaf, 0xfa, 0xaf, 0xdd, 0xcc, 0x48, 0xe2, 0x4a, 0xa4]), Uint8List.fromList(<int>[0x66, 0x7f, 0xcb, 0x53, 0x85, 0x52, 0x36, 0xb1, 0x19, 0x26, 0xf, 0x61, 0x26, 0x31, 0x2f, 0x7f, 0x3, 0x23, 0x98, 0xd2, 0xc2, 0xbc, 0x90, 0xe9, 0x13, 0x21, 0xb4, 0xcc, 0x7e, 0xd8, 0xd7, 0x24]), Uint8List.fromList(<int>[0x71, 0x33, 0x7d, 0x91, 0xdf, 0x2b, 0xe7, 0x5f, 0xf1, 0xc1, 0xce, 0x88, 0xc1, 0xf5, 0xf0, 0x29, 0x3c, 0xe7, 0xee, 0x45, 0x62, 0xf6, 0xee, 0x3e, 0x4, 0x5f, 0xa0, 0x7f, 0xaa, 0xd3, 0x11, 0xdd]), Uint8List.fromList(<int>[0x8a, 0x8b, 0xbc, 0xc5, 0xea, 0x68, 0x9b, 0x51, 0xef, 0x12, 0x7b, 0xcf, 0x3f, 0xf0, 0xb1, 0x23, 0x92, 0xa5, 0x4c, 0x50, 0x9b, 0x20, 0x30, 0x4d, 0x4c, 0x48, 0x86, 0xd3, 0xc1, 0x64, 0x5b, 0x83]), Uint8List.fromList(<int>[0xcc, 0xdf, 0xe0, 0x8f, 0x51, 0xfa, 0x49, 0x2b, 0x49, 0x72, 0x88, 0xf1, 0x7f, 0x25, 0x52, 0x4, 0xce, 0x2, 0xb0, 0xd1, 0xdf, 0xf6, 0xcf, 0x5, 0xbb, 0x2c, 0x22, 0x8e, 0xfd, 0xd1, 0xed, 0x2c]), Uint8List.fromList(<int>[0xdf, 0xef, 0xd1, 0xa1, 0x4a, 0xe5, 0x2a, 0x2c, 0xe6, 0x15, 0x90, 0xbd, 0x7e, 0x89, 0xd7, 0x8a, 0xe9, 0x34, 0xe2, 0x60, 0x4a, 0xb, 0xd2, 0x58, 0x76, 0xf6, 0xb3, 0x5c, 0x7d, 0x72, 0x58, 0x7e]), Uint8List.fromList(<int>[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), Uint8List.fromList(<int>[0x3, 0x6, 0x46, 0x6f, 0xe5, 0x21, 0x17, 0x32, 0xff, 0xec, 0xad, 0xba, 0x72, 0xc3, 0x9b, 0xe7, 0xbc, 0x8c, 0xe5, 0xbb, 0xc5, 0xf7, 0x12, 0x6b, 0x2c, 0x43, 0x9b, 0x3a, 0x40, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x4, 0x79, 0xd5, 0x5b, 0xf2, 0x31, 0xc0, 0x6e, 0xee, 0x74, 0xc5, 0x6e, 0xce, 0x68, 0x15, 0x7, 0xfd, 0xb1, 0xb2, 0xde, 0xa3, 0xf4, 0x8e, 0x51, 0x2, 0xb1, 0xcd, 0xa2, 0x56, 0xbc, 0x13, 0x8f]), Uint8List.fromList(<int>[0x6, 0xdd, 0xf6, 0xe1, 0xd7, 0x65, 0xa1, 0x93, 0xd9, 0xcb, 0xe1, 0x46, 0xce, 0xeb, 0x79, 0xac, 0x1c, 0xb4, 0x85, 0xed, 0x5f, 0x5b, 0x37, 0x91, 0x3a, 0x8c, 0xf5, 0x85, 0x7e, 0xff, 0x0, 0xa9]), Uint8List.fromList(<int>[0x52, 0x61, 0xd1, 0x4a, 0xac, 0xc5, 0xbc, 0xe, 0xec, 0x63, 0x5d, 0xa8, 0x70, 0x5a, 0x1f, 0x70, 0xa3, 0x9e, 0xe3, 0x5a, 0x9a, 0xcf, 0xb, 0xf8, 0xf2, 0x2c, 0xc6, 0xce, 0x49, 0x1, 0x9d, 0x7a]), Uint8List.fromList(<int>[0x8c, 0x97, 0x25, 0x8f, 0x4e, 0x24, 0x89, 0xf1, 0xbb, 0x3d, 0x10, 0x29, 0x14, 0x8e, 0xd, 0x83, 0xb, 0x5a, 0x13, 0x99, 0xda, 0xff, 0x10, 0x84, 0x4, 0x8e, 0x7b, 0xd8, 0xdb, 0xe9, 0xf8, 0x59]), Uint8List.fromList(<int>[0x9a, 0x80, 0xb, 0xff, 0x4c, 0x87, 0x36, 0x88, 0x96, 0xc2, 0xf, 0xc1, 0x40, 0x73, 0xeb, 0xf1, 0xcb, 0x5a, 0xa3, 0x75, 0xfe, 0x81, 0xfe, 0x4d, 0xbd, 0xc8, 0x2b, 0xa4, 0xdf, 0xb7, 0x5e, 0x78]), Uint8List.fromList(<int>[0xb4, 0x3f, 0xfa, 0x27, 0xf5, 0xd7, 0xf6, 0x4a, 0x74, 0xc0, 0x9b, 0x1f, 0x29, 0x58, 0x79, 0xde, 0x4b, 0x9, 0xab, 0x36, 0xdf, 0xc9, 0xdd, 0x51, 0x4b, 0x32, 0x1a, 0xa7, 0xb3, 0x8c, 0xe5]), Uint8List.fromList(<int>[0xe7, 0x4a, 0xd9, 0x6c, 0xe3, 0x65, 0x9f, 0xd3, 0x13, 0x51, 0x0, 0x28, 0x4b, 0xf7, 0x78, 0x4, 0x5b, 0x85, 0x10, 0xa8, 0xf3, 0x4e, 0x49, 0x8c, 0x92, 0x2e, 0xee, 0x6f, 0xc3, 0x5, 0xf8, 0x69])];
      SolanaInstruction actualSolanaInstruction =
      SolanaInstruction(programIdIndex: 11, accountIndices: <int>[0, 4, 0, 23, 7, 10], data: Uint8List.fromList(<int>[1]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[1]));
      expect(actualSolanaInstruction.accountIndices, <int>[0, 4, 0, 23, 7, 10]);
      expect(actualSolanaInstruction.programIdIndex, 11);
      expect(actualSolanaInstructionDecoded.programId, '6YawcNeZ74tRyCv4UfGydYMr7eho7vbUR6ScVffxKAb3');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.unknown);
    });

    test('Should [return invalid SolanaInstructionDecoded] - testing decode() with empty accountKeys', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[])];
      SolanaInstruction actualSolanaInstruction =
      SolanaInstruction(programIdIndex: 11, accountIndices: <int>[0, 4, 0, 23, 7, 10], data: Uint8List.fromList(<int>[1]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[1]));
      expect(actualSolanaInstruction.accountIndices, <int>[0, 4, 0, 23, 7, 10]);
      expect(actualSolanaInstruction.programIdIndex, 11);
      expect(actualSolanaInstructionDecoded.programId, '');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.invalidInstruction);
    });

    test('Should [return invalid SolanaInstructionDecoded] - testing decode() with programIdIndex out of bounds', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[29, 3, 212, 1, 8, 94, 206, 81, 207, 141, 242, 121, 172, 168, 237, 109, 45, 74, 148, 132, 23, 185, 13, 77, 21, 64, 84, 94, 20, 24, 88, 244]), Uint8List.fromList(<int>[81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92]), Uint8List.fromList(<int>[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]), Uint8List.fromList(<int>[3, 6, 70, 111, 229, 33, 23, 50, 255, 236, 173, 186, 114, 195, 155, 231, 188, 140, 229, 187, 197, 247, 18, 107, 44, 67, 155, 58, 64, 0, 0, 0])];
      SolanaInstruction actualSolanaInstruction =
      SolanaInstruction(programIdIndex: 25, accountIndices: <int>[0, 4, 0, 23, 7, 10], data: Uint8List.fromList(<int>[1]));

      // Act
      SolanaInstructionDecoded actualSolanaInstructionDecoded = actualSolanaInstruction.decode(actualAccountKeys);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[1]));
      expect(actualSolanaInstruction.accountIndices, <int>[0, 4, 0, 23, 7, 10]);
      expect(actualSolanaInstruction.programIdIndex, 25);
      expect(actualSolanaInstructionDecoded.programId, '');
      expect(actualSolanaInstructionDecoded.type, SolanaInstructionType.invalidInstruction);
    });
  });
}
