import 'dart:typed_data';

import 'package:codec_utils/codec_utils.dart';
import 'package:cryptography_utils/cryptography_utils.dart';
import 'package:test/test.dart';

void main() {
  group('Tests of SwapInstruction constructor', () {
    test('Should [return SwapInstruction]', () {
      // Act
      SwapInstruction actualSwapInstruction = const SwapInstruction(
        programIdString: 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL',
        associatedProgramString: 'AssocProg1111111111111111111111111111111111',
        signerString: 'Signer22222222222222222222222222222222222222',
        tokenProgramString: 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA',
        recipientString: 'Recipient33333333333333333333333333333333333',
        senderString: 'Sender44444444444444444444444444444444444444',
      );

      // Assert
      String expectedProgramId = 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL';
      String expectedAssociatedProgram = 'AssocProg1111111111111111111111111111111111';
      String expectedSigner = 'Signer22222222222222222222222222222222222222';
      String expectedTokenProgram = 'TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA';
      String expectedRecipient = 'Recipient33333333333333333333333333333333333';
      String expectedSender = 'Sender44444444444444444444444444444444444444';

      expect(actualSwapInstruction.programIdString, expectedProgramId);
      expect(actualSwapInstruction.associatedProgramString, expectedAssociatedProgram);
      expect(actualSwapInstruction.signerString, expectedSigner);
      expect(actualSwapInstruction.tokenProgramString, expectedTokenProgram);
      expect(actualSwapInstruction.recipientString, expectedRecipient);
      expect(actualSwapInstruction.senderString, expectedSender);
      expect(actualSwapInstruction.programId, expectedProgramId);
      expect(actualSwapInstruction.associatedProgram, expectedAssociatedProgram);
      expect(actualSwapInstruction.signer, expectedSigner);
      expect(actualSwapInstruction.tokenProgram, expectedTokenProgram);
      expect(actualSwapInstruction.recipient, expectedRecipient);
      expect(actualSwapInstruction.sender, expectedSender);
    });
  });

  group('Tests of SwapInstruction.fromSerializedData()', () {
    test('Should [return SwapInstruction] from serialized data', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[0xac, 0x54, 0xc2, 0xf6, 0x6, 0xd, 0xdd, 0x1f, 0x2d, 0x15, 0x6b, 0xd7, 0x5c, 0x57, 0x56, 0x7f, 0x36, 0x11, 0x87, 0xc9, 0x56, 0x21, 0x27, 0x48, 0xc4, 0xfb, 0x43, 0x11, 0x18, 0x57, 0xa6, 0x56]), Uint8List.fromList(<int>[0x56, 0x77, 0x34, 0x58, 0x75, 0xf4, 0x88, 0x16, 0xbb, 0xea, 0x63, 0xe5, 0x47, 0x90, 0xcc, 0xca, 0xc7, 0x6c, 0xd6, 0x1f, 0x7f, 0x14, 0xd3, 0xaf, 0xfa, 0xaf, 0xdd, 0xcc, 0x48, 0xe2, 0x4a, 0xa4]), Uint8List.fromList(<int>[0x66, 0x7f, 0xcb, 0x53, 0x85, 0x52, 0x36, 0xb1, 0x19, 0x26, 0xf, 0x61, 0x26, 0x31, 0x2f, 0x7f, 0x3, 0x23, 0x98, 0xd2, 0xc2, 0xbc, 0x90, 0xe9, 0x13, 0x21, 0xb4, 0xcc, 0x7e, 0xd8, 0xd7, 0x24]), Uint8List.fromList(<int>[0x71, 0x33, 0x7d, 0x91, 0xdf, 0x2b, 0xe7, 0x5f, 0xf1, 0xc1, 0xce, 0x88, 0xc1, 0xf5, 0xf0, 0x29, 0x3c, 0xe7, 0xee, 0x45, 0x62, 0xf6, 0xee, 0x3e, 0x4, 0x5f, 0xa0, 0x7f, 0xaa, 0xd3, 0x11, 0xdd]), Uint8List.fromList(<int>[0x8a, 0x8b, 0xbc, 0xc5, 0xea, 0x68, 0x9b, 0x51, 0xef, 0x12, 0x7b, 0xcf, 0x3f, 0xf0, 0xb1, 0x23, 0x92, 0xa5, 0x4c, 0x50, 0x9b, 0x20, 0x30, 0x4d, 0x4c, 0x48, 0x86, 0xd3, 0xc1, 0x64, 0x5b, 0x83]), Uint8List.fromList(<int>[0xcc, 0xdf, 0xe0, 0x8f, 0x51, 0xfa, 0x49, 0x2b, 0x49, 0x72, 0x88, 0xf1, 0x7f, 0x25, 0x52, 0x4, 0xce, 0x2, 0xb0, 0xd1, 0xdf, 0xf6, 0xcf, 0x5, 0xbb, 0x2c, 0x22, 0x8e, 0xfd, 0xd1, 0xed, 0x2c]), Uint8List.fromList(<int>[0xdf, 0xef, 0xd1, 0xa1, 0x4a, 0xe5, 0x2a, 0x2c, 0xe6, 0x15, 0x90, 0xbd, 0x7e, 0x89, 0xd7, 0x8a, 0xe9, 0x34, 0xe2, 0x60, 0x4a, 0xb, 0xd2, 0x58, 0x76, 0xf6, 0xb3, 0x5c, 0x7d, 0x72, 0x58, 0x7e]), Uint8List.fromList(<int>[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), Uint8List.fromList(<int>[0x3, 0x6, 0x46, 0x6f, 0xe5, 0x21, 0x17, 0x32, 0xff, 0xec, 0xad, 0xba, 0x72, 0xc3, 0x9b, 0xe7, 0xbc, 0x8c, 0xe5, 0xbb, 0xc5, 0xf7, 0x12, 0x6b, 0x2c, 0x43, 0x9b, 0x3a, 0x40, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x4, 0x79, 0xd5, 0x5b, 0xf2, 0x31, 0xc0, 0x6e, 0xee, 0x74, 0xc5, 0x6e, 0xce, 0x68, 0x15, 0x7, 0xfd, 0xb1, 0xb2, 0xde, 0xa3, 0xf4, 0x8e, 0x51, 0x2, 0xb1, 0xcd, 0xa2, 0x56, 0xbc, 0x13, 0x8f]), Uint8List.fromList(<int>[0x6, 0xdd, 0xf6, 0xe1, 0xd7, 0x65, 0xa1, 0x93, 0xd9, 0xcb, 0xe1, 0x46, 0xce, 0xeb, 0x79, 0xac, 0x1c, 0xb4, 0x85, 0xed, 0x5f, 0x5b, 0x37, 0x91, 0x3a, 0x8c, 0xf5, 0x85, 0x7e, 0xff, 0x0, 0xa9]), Uint8List.fromList(<int>[0x52, 0x61, 0xd1, 0x4a, 0xac, 0xc5, 0xbc, 0xe, 0xec, 0x63, 0x5d, 0xa8, 0x70, 0x5a, 0x1f, 0x70, 0xa3, 0x9e, 0xe3, 0x5a, 0x9a, 0xcf, 0xb, 0xf8, 0xf2, 0x2c, 0xc6, 0xce, 0x49, 0x1, 0x9d, 0x7a]), Uint8List.fromList(<int>[0x8c, 0x97, 0x25, 0x8f, 0x4e, 0x24, 0x89, 0xf1, 0xbb, 0x3d, 0x10, 0x29, 0x14, 0x8e, 0xd, 0x83, 0xb, 0x5a, 0x13, 0x99, 0xda, 0xff, 0x10, 0x84, 0x4, 0x8e, 0x7b, 0xd8, 0xdb, 0xe9, 0xf8, 0x59]), Uint8List.fromList(<int>[0x9a, 0x80, 0xb, 0xff, 0x4c, 0x87, 0x36, 0x88, 0x96, 0xc2, 0xf, 0xc1, 0x40, 0x73, 0xeb, 0xf1, 0xcb, 0x5a, 0xa3, 0x75, 0xfe, 0x81, 0xfe, 0x4d, 0xbd, 0xc8, 0x2b, 0xa4, 0xdf, 0xb7, 0x5e, 0x78]), Uint8List.fromList(<int>[0xb4, 0x3f, 0xfa, 0x27, 0xf5, 0xd7, 0xf6, 0x4a, 0x74, 0xc0, 0x9b, 0x1f, 0x29, 0x58, 0x79, 0xde, 0x4b, 0x9, 0xab, 0x36, 0xdf, 0xc9, 0xdd, 0x51, 0x4b, 0x32, 0x1a, 0xa7, 0xb3, 0x8c, 0xe5]), Uint8List.fromList(<int>[0xe7, 0x4a, 0xd9, 0x6c, 0xe3, 0x65, 0x9f, 0xd3, 0x13, 0x51, 0x0, 0x28, 0x4b, 0xf7, 0x78, 0x4, 0x5b, 0x85, 0x10, 0xa8, 0xf3, 0x4e, 0x49, 0x8c, 0x92, 0x2e, 0xee, 0x6f, 0xc3, 0x5, 0xf8, 0x69])];
      SolanaInstructionRaw actualSolanaInstruction =
      SolanaInstructionRaw(programIdIndex: 12, accountIndices: <int>[0, 4, 0, 23, 7, 10], data: Uint8List.fromList(<int>[1]));
      String actualProgramId = Base58Codec.encode(actualAccountKeys[actualSolanaInstruction.programIdIndex]);

      // Act
      SwapInstruction actualSolanaInstructionDecoded = SwapInstruction.fromSerializedData(actualSolanaInstruction, actualAccountKeys, actualProgramId);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[1]));
      expect(actualSolanaInstruction.accountIndices, <int>[0, 4, 0, 23, 7, 10]);
      expect(actualSolanaInstruction.programIdIndex, 12);
      expect(actualSolanaInstructionDecoded.programId, 'ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL');
      expect(actualSolanaInstructionDecoded.sender, 'Cbi65bkTUnJWG8uesnCHg2gAEj4ujeD1SamJPe78fdq7');
      expect(actualSolanaInstructionDecoded.recipient, 'AKpr7UPK7JdQ1BjqkNmo1HQUMwve8EW6EZQhZRbiHPPY');
    });

    test('Should [throw RangeError] if there is incomplete data', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[0xac, 0x54, 0xc2, 0xf6, 0x6, 0xd, 0xdd, 0x1f, 0x2d, 0x15, 0x6b, 0xd7, 0x5c, 0x57, 0x56, 0x7f, 0x36, 0x11, 0x87, 0xc9, 0x56, 0x21, 0x27, 0x48, 0xc4, 0xfb, 0x43, 0x11, 0x18, 0x57, 0xa6, 0x56]), Uint8List.fromList(<int>[0x56, 0x77, 0x34, 0x58, 0x75, 0xf4, 0x88, 0x16, 0xbb, 0xea, 0x63, 0xe5, 0x47, 0x90, 0xcc, 0xca, 0xc7, 0x6c, 0xd6, 0x1f, 0x7f, 0x14, 0xd3, 0xaf, 0xfa, 0xaf, 0xdd, 0xcc, 0x48, 0xe2, 0x4a, 0xa4]), Uint8List.fromList(<int>[0x66, 0x7f, 0xcb, 0x53, 0x85, 0x52, 0x36, 0xb1, 0x19, 0x26, 0xf, 0x61, 0x26, 0x31, 0x2f, 0x7f, 0x3, 0x23, 0x98, 0xd2, 0xc2, 0xbc, 0x90, 0xe9, 0x13, 0x21, 0xb4, 0xcc, 0x7e, 0xd8, 0xd7, 0x24]), Uint8List.fromList(<int>[0x71, 0x33, 0x7d, 0x91, 0xdf, 0x2b, 0xe7, 0x5f, 0xf1, 0xc1, 0xce, 0x88, 0xc1, 0xf5, 0xf0, 0x29, 0x3c, 0xe7, 0xee, 0x45, 0x62, 0xf6, 0xee, 0x3e, 0x4, 0x5f, 0xa0, 0x7f, 0xaa, 0xd3, 0x11, 0xdd]), Uint8List.fromList(<int>[0x8a, 0x8b, 0xbc, 0xc5, 0xea, 0x68, 0x9b, 0x51, 0xef, 0x12, 0x7b, 0xcf, 0x3f, 0xf0, 0xb1, 0x23, 0x92, 0xa5, 0x4c, 0x50, 0x9b, 0x20, 0x30, 0x4d, 0x4c, 0x48, 0x86, 0xd3, 0xc1, 0x64, 0x5b, 0x83]), Uint8List.fromList(<int>[0xcc, 0xdf, 0xe0, 0x8f, 0x51, 0xfa, 0x49, 0x2b, 0x49, 0x72, 0x88, 0xf1, 0x7f, 0x25, 0x52, 0x4, 0xce, 0x2, 0xb0, 0xd1, 0xdf, 0xf6, 0xcf, 0x5, 0xbb, 0x2c, 0x22, 0x8e, 0xfd, 0xd1, 0xed, 0x2c]), Uint8List.fromList(<int>[0xdf, 0xef, 0xd1, 0xa1, 0x4a, 0xe5, 0x2a, 0x2c, 0xe6, 0x15, 0x90, 0xbd, 0x7e, 0x89, 0xd7, 0x8a, 0xe9, 0x34, 0xe2, 0x60, 0x4a, 0xb, 0xd2, 0x58, 0x76, 0xf6, 0xb3, 0x5c, 0x7d, 0x72, 0x58, 0x7e]), Uint8List.fromList(<int>[0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00]), Uint8List.fromList(<int>[0x3, 0x6, 0x46, 0x6f, 0xe5, 0x21, 0x17, 0x32, 0xff, 0xec, 0xad, 0xba, 0x72, 0xc3, 0x9b, 0xe7, 0xbc, 0x8c, 0xe5, 0xbb, 0xc5, 0xf7, 0x12, 0x6b, 0x2c, 0x43, 0x9b, 0x3a, 0x40, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x4, 0x79, 0xd5, 0x5b, 0xf2, 0x31, 0xc0, 0x6e, 0xee, 0x74, 0xc5, 0x6e, 0xce, 0x68, 0x15, 0x7, 0xfd, 0xb1, 0xb2, 0xde, 0xa3, 0xf4, 0x8e, 0x51, 0x2, 0xb1, 0xcd, 0xa2, 0x56, 0xbc, 0x13, 0x8f]), Uint8List.fromList(<int>[0x6, 0xdd, 0xf6, 0xe1, 0xd7, 0x65, 0xa1, 0x93, 0xd9, 0xcb, 0xe1, 0x46, 0xce, 0xeb, 0x79, 0xac, 0x1c, 0xb4, 0x85, 0xed, 0x5f, 0x5b, 0x37, 0x91, 0x3a, 0x8c, 0xf5, 0x85, 0x7e, 0xff, 0x0, 0xa9]), Uint8List.fromList(<int>[0x52, 0x61, 0xd1, 0x4a, 0xac, 0xc5, 0xbc, 0xe, 0xec, 0x63, 0x5d, 0xa8, 0x70, 0x5a, 0x1f, 0x70, 0xa3, 0x9e, 0xe3, 0x5a, 0x9a, 0xcf, 0xb, 0xf8, 0xf2, 0x2c, 0xc6, 0xce, 0x49, 0x1, 0x9d, 0x7a]), Uint8List.fromList(<int>[0x8c, 0x97, 0x25, 0x8f, 0x4e, 0x24, 0x89, 0xf1, 0xbb, 0x3d, 0x10, 0x29, 0x14, 0x8e, 0xd, 0x83, 0xb, 0x5a, 0x13, 0x99, 0xda, 0xff, 0x10, 0x84, 0x4, 0x8e, 0x7b, 0xd8, 0xdb, 0xe9, 0xf8, 0x59]), Uint8List.fromList(<int>[0x9a, 0x80, 0xb, 0xff, 0x4c, 0x87, 0x36, 0x88, 0x96, 0xc2, 0xf, 0xc1, 0x40, 0x73, 0xeb, 0xf1, 0xcb, 0x5a, 0xa3, 0x75, 0xfe, 0x81, 0xfe, 0x4d, 0xbd, 0xc8, 0x2b, 0xa4, 0xdf, 0xb7, 0x5e, 0x78]), Uint8List.fromList(<int>[0xb4, 0x3f, 0xfa, 0x27, 0xf5, 0xd7, 0xf6, 0x4a, 0x74, 0xc0, 0x9b, 0x1f, 0x29, 0x58, 0x79, 0xde, 0x4b, 0x9, 0xab, 0x36, 0xdf, 0xc9, 0xdd, 0x51, 0x4b, 0x32, 0x1a, 0xa7, 0xb3, 0x8c, 0xe5]), Uint8List.fromList(<int>[0xe7, 0x4a, 0xd9, 0x6c, 0xe3, 0x65, 0x9f, 0xd3, 0x13, 0x51, 0x0, 0x28, 0x4b, 0xf7, 0x78, 0x4, 0x5b, 0x85, 0x10, 0xa8, 0xf3, 0x4e, 0x49, 0x8c, 0x92, 0x2e, 0xee, 0x6f, 0xc3, 0x5, 0xf8, 0x69])];
      SolanaInstructionRaw actualSolanaInstruction =
      SolanaInstructionRaw(programIdIndex: 12, accountIndices: <int>[0, 4], data: Uint8List.fromList(<int>[1]));
      String actualProgramId = Base58Codec.encode(actualAccountKeys[actualSolanaInstruction.programIdIndex]);

      expect(() => SwapInstruction.fromSerializedData(actualSolanaInstruction, actualAccountKeys, actualProgramId),
        throwsA(isA<RangeError>()),
      );
    });
  });
}
