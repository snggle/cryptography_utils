import 'dart:typed_data';

import 'package:codec_utils/codec_utils.dart';
import 'package:cryptography_utils/cryptography_utils.dart';
import 'package:test/test.dart';

void main() {
  group('Tests of StakeInitializeInstruction constructor', () {
    test('Should [return StakeInitializeInstruction]', () {
      // Act
      StakeInitializeInstruction actualStakeInitializeInstruction = const StakeInitializeInstruction(
        programIdString: 'Stake11111111111111111111111111111111111111',
        recipientString: 'Recipient111111111111111111111111111111111',
      );

      // Assert
      String expectedProgramId = 'Stake11111111111111111111111111111111111111';
      String expectedRecipient = 'Recipient111111111111111111111111111111111';

      expect(actualStakeInitializeInstruction.programIdString, expectedProgramId);
      expect(actualStakeInitializeInstruction.recipientString, expectedRecipient);
      expect(actualStakeInitializeInstruction.programId, expectedProgramId);
      expect(actualStakeInitializeInstruction.recipient, expectedRecipient);
    });
  });

  group('Tests of StakeInitializeInstruction.fromSerializedData()', () {
    test('Should [return StakeInitializeInstruction] from serialized data', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[0x51, 0x98, 0x8, 0x5, 0x5d, 0xe3, 0x75, 0xe1, 0x95, 0x18, 0x92, 0xab, 0xb0, 0xb8, 0x34, 0x1f, 0x73, 0x63, 0x2f, 0xf2, 0x3f, 0x96, 0x68, 0x77, 0x3a, 0x30, 0xf4, 0xca, 0x34, 0xcd, 0x7b, 0x5c]), Uint8List.fromList(<int>[0xc3, 0x3f, 0x1c, 0xbb, 0x48, 0xeb, 0x4b, 0xc1, 0xad, 0xef, 0x59, 0x73, 0x96, 0x42, 0x8f, 0x53, 0x22, 0xf0, 0x77, 0x75, 0xaa, 0xfc, 0x9d, 0x89, 0x5a, 0x3a, 0x51, 0x9f, 0xdd, 0xd2, 0x2a, 0x96]), Uint8List.fromList(<int>[0x3, 0x6, 0x46, 0x6f, 0xe5, 0x21, 0x17, 0x32, 0xff, 0xec, 0xad, 0xba, 0x72, 0xc3, 0x9b, 0xe7, 0xbc, 0x8c, 0xe5, 0xbb, 0xc5, 0xf7, 0x12, 0x6b, 0x2c, 0x43, 0x9b, 0x3a, 0x40, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa1, 0xd8, 0x17, 0x91, 0x37, 0x54, 0x2a, 0x98, 0x34, 0x37, 0xbd, 0xfe, 0x2a, 0x7a, 0xb2, 0x55, 0x7f, 0x53, 0x5c, 0x8a, 0x78, 0x72, 0x2b, 0x68, 0xa4, 0x9d, 0xc0, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x19, 0x2c, 0x5c, 0x51, 0x21, 0x8c, 0xc9, 0x4c, 0x3d, 0x4a, 0xf1, 0x7f, 0x58, 0xda, 0xee, 0x8, 0x9b, 0xa1, 0xfd, 0x44, 0xe3, 0xdb, 0xd9, 0x8a, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0xdd, 0xf4, 0x2a, 0x4, 0x80, 0xa, 0x54, 0xde, 0x2e, 0x58, 0x3f, 0x94, 0xf1, 0x7b, 0x8, 0x97, 0x25, 0xb7, 0x72, 0xd1, 0x33, 0x35, 0x26, 0x27, 0x12, 0x41, 0x53, 0x27, 0x76, 0xd2, 0xff, 0xc6]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x18, 0xc7, 0x74, 0xc9, 0x28, 0x56, 0x63, 0x98, 0x69, 0x1d, 0x5e, 0xb6, 0x8b, 0x5e, 0xb8, 0xa3, 0x9b, 0x4b, 0x6d, 0x5c, 0x73, 0x55, 0x5b, 0x21, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x19, 0x35, 0x84, 0xd0, 0xfe, 0xed, 0x9b, 0xb3, 0x43, 0x1d, 0x13, 0x20, 0x6b, 0xe5, 0x44, 0x28, 0x1b, 0x57, 0xb8, 0x56, 0x6c, 0xc5, 0x37, 0x5f, 0xf4, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa1, 0xd8, 0x17, 0xa5, 0x2, 0x5, 0xb, 0x68, 0x7, 0x91, 0xe6, 0xce, 0x6d, 0xb8, 0x8e, 0x1e, 0x5b, 0x71, 0x50, 0xf6, 0x1f, 0xc6, 0x79, 0xa, 0x4e, 0xb4, 0xd1, 0x0, 0x0, 0x0, 0x0])];
      SolanaInstructionRaw actualSolanaInstruction = SolanaInstructionRaw(programIdIndex: 4, accountIndices: <int>[1, 6, 7, 8, 9, 0], data: Uint8List.fromList(<int>[0, 0, 0, 0, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92]));
      String actualProgramId = Base58Codec.encode(actualAccountKeys[actualSolanaInstruction.programIdIndex]);

      // Act
      StakeInitializeInstruction actualSolanaInstructionDecoded = StakeInitializeInstruction.fromSerializedData(actualSolanaInstruction, actualAccountKeys, actualProgramId);

      // Assert
      expect(actualSolanaInstruction.data, Uint8List.fromList(<int>[0, 0, 0, 0, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24,146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92]));
      expect(actualSolanaInstruction.accountIndices, <int>[1, 6, 7, 8, 9, 0]);
      expect(actualSolanaInstruction.programIdIndex, 4);
      expect(actualSolanaInstructionDecoded.programId, 'Stake11111111111111111111111111111111111111');
      expect(actualSolanaInstructionDecoded.recipient, 'E9AKSDnvxFcUrvMqRVrANNZ2qdidh4AC1niGhQ6vGZxR');
    });

    test('Should [throw RangeError] if there is incomplete data', () {
      // Arrange
      List<Uint8List> actualAccountKeys = <Uint8List>[Uint8List.fromList(<int>[0x51, 0x98, 0x8, 0x5, 0x5d, 0xe3, 0x75, 0xe1, 0x95, 0x18, 0x92, 0xab, 0xb0, 0xb8, 0x34, 0x1f, 0x73, 0x63, 0x2f, 0xf2, 0x3f, 0x96, 0x68, 0x77, 0x3a, 0x30, 0xf4, 0xca, 0x34, 0xcd, 0x7b, 0x5c]), Uint8List.fromList(<int>[0xc3, 0x3f, 0x1c, 0xbb, 0x48, 0xeb, 0x4b, 0xc1, 0xad, 0xef, 0x59, 0x73, 0x96, 0x42, 0x8f, 0x53, 0x22, 0xf0, 0x77, 0x75, 0xaa, 0xfc, 0x9d, 0x89, 0x5a, 0x3a, 0x51, 0x9f, 0xdd, 0xd2, 0x2a, 0x96]), Uint8List.fromList(<int>[0x3, 0x6, 0x46, 0x6f, 0xe5, 0x21, 0x17, 0x32, 0xff, 0xec, 0xad, 0xba, 0x72, 0xc3, 0x9b, 0xe7, 0xbc, 0x8c, 0xe5, 0xbb, 0xc5, 0xf7, 0x12, 0x6b, 0x2c, 0x43, 0x9b, 0x3a, 0x40, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa1, 0xd8, 0x17, 0x91, 0x37, 0x54, 0x2a, 0x98, 0x34, 0x37, 0xbd, 0xfe, 0x2a, 0x7a, 0xb2, 0x55, 0x7f, 0x53, 0x5c, 0x8a, 0x78, 0x72, 0x2b, 0x68, 0xa4, 0x9d, 0xc0, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x19, 0x2c, 0x5c, 0x51, 0x21, 0x8c, 0xc9, 0x4c, 0x3d, 0x4a, 0xf1, 0x7f, 0x58, 0xda, 0xee, 0x8, 0x9b, 0xa1, 0xfd, 0x44, 0xe3, 0xdb, 0xd9, 0x8a, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0xdd, 0xf4, 0x2a, 0x4, 0x80, 0xa, 0x54, 0xde, 0x2e, 0x58, 0x3f, 0x94, 0xf1, 0x7b, 0x8, 0x97, 0x25, 0xb7, 0x72, 0xd1, 0x33, 0x35, 0x26, 0x27, 0x12, 0x41, 0x53, 0x27, 0x76, 0xd2, 0xff, 0xc6]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x18, 0xc7, 0x74, 0xc9, 0x28, 0x56, 0x63, 0x98, 0x69, 0x1d, 0x5e, 0xb6, 0x8b, 0x5e, 0xb8, 0xa3, 0x9b, 0x4b, 0x6d, 0x5c, 0x73, 0x55, 0x5b, 0x21, 0x0, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa7, 0xd5, 0x17, 0x19, 0x35, 0x84, 0xd0, 0xfe, 0xed, 0x9b, 0xb3, 0x43, 0x1d, 0x13, 0x20, 0x6b, 0xe5, 0x44, 0x28, 0x1b, 0x57, 0xb8, 0x56, 0x6c, 0xc5, 0x37, 0x5f, 0xf4, 0x0, 0x0, 0x0]), Uint8List.fromList(<int>[0x6, 0xa1, 0xd8, 0x17, 0xa5, 0x2, 0x5, 0xb, 0x68, 0x7, 0x91, 0xe6, 0xce, 0x6d, 0xb8, 0x8e, 0x1e, 0x5b, 0x71, 0x50, 0xf6, 0x1f, 0xc6, 0x79, 0xa, 0x4e, 0xb4, 0xd1, 0x0, 0x0, 0x0, 0x0])];
      SolanaInstructionRaw actualSolanaInstruction = SolanaInstructionRaw(programIdIndex: 4, accountIndices: <int>[], data: Uint8List.fromList(<int>[0, 0, 0, 0, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 81, 152, 8, 5, 93, 227, 117, 225, 149, 24, 146, 171, 176, 184, 52, 31, 115, 99, 47, 242, 63, 150, 104, 119, 58, 48, 244, 202, 52, 205, 123, 92]));
      String actualProgramId = Base58Codec.encode(actualAccountKeys[actualSolanaInstruction.programIdIndex]);

      expect(() => StakeInitializeInstruction.fromSerializedData(actualSolanaInstruction, actualAccountKeys, actualProgramId),
        throwsA(isA<RangeError>()),
      );
    });
  });
}
